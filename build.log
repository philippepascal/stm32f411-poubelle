   Compiling proc-macro2 v1.0.103
   Compiling quote v1.0.41
   Compiling unicode-ident v1.0.22
   Compiling cortex-m v0.7.7
   Compiling nb v1.1.0
   Compiling semver-parser v0.7.0
   Compiling void v1.0.2
   Compiling portable-atomic v1.11.1
   Compiling vcell v0.1.3
   Compiling cortex-m-rt v0.7.5
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A substitute implementation of the compiler'\''s `proc_macro` API to decouple token-based libraries from the procedural macro use case.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/proc-macro2' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.0.103 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=103 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="default"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' -C metadata=b7bcfab895861b87 -C extra-filename=-1dca823bd661a646 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/proc-macro2-1dca823bd661a646 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Quasi-quoting macro quote'\!'(...)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=quote CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/quote' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.0.41 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=41 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="default"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "proc-macro"))' -C metadata=d44e38ae67a90409 -C extra-filename=-b9e6f215e52b6cc5 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/quote-b9e6f215e52b6cc5 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=unicode_ident CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.22 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.22/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='(MIT OR Apache-2.0) AND Unicode-3.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=unicode-ident CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/unicode-ident' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.22 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=22 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name unicode_ident --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.22/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=cd69c0af1d292de5 -C extra-filename=-ee7f45f67db08b88 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=nb CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nb-1.1.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nb-1.1.0/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Minimal non-blocking I/O layer' CARGO_PKG_HOMEPAGE='https://github.com/rust-embedded/nb' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=nb CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/nb' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.1.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name nb --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nb-1.1.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("defmt-0-3"))' -C metadata=e7671b819a1f72d2 -C extra-filename=-7627bedbeb0eefc1 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=semver_parser CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-parser-0.7.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-parser-0.7.0/Cargo.toml CARGO_PKG_AUTHORS='Steve Klabnik <steve@steveklabnik.com>' CARGO_PKG_DESCRIPTION='Parsing of the semver spec.
' CARGO_PKG_HOMEPAGE='https://github.com/steveklabnik/semver-parser' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=semver-parser CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/steveklabnik/semver-parser' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.7.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name semver_parser --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-parser-0.7.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=0380267dbfaa5224 -C extra-filename=-6885d170c11881ef --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/Cargo.toml CARGO_PKG_AUTHORS='The Cortex-M Team <cortex-m@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Low level access to Cortex-M processors' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cortex-m CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/cortex-m' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.7.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="critical-section"' --cfg 'feature="critical-section-single-core"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("cm7", "cm7-r0p1", "critical-section", "critical-section-single-core", "inline-asm", "linker-plugin-lto", "serde", "std"))' -C metadata=ff9ec1fcaaaddd9b -C extra-filename=-754ab2b6b3dbd7a9 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/cortex-m-754ab2b6b3dbd7a9 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=void CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/void-1.0.2 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/void-1.0.2/Cargo.toml CARGO_PKG_AUTHORS='Jonathan Reem <jonathan.reem@gmail.com>' CARGO_PKG_DESCRIPTION='The uninhabited void type for use in statically impossible cases.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=void CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/reem/rust-void.git' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.2 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name void --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/void-1.0.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=c15e25507eef26c0 -C extra-filename=-ac6d20138817a90f --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=vcell CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vcell-0.1.3 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vcell-0.1.3/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <japaricious@gmail.com>' CARGO_PKG_DESCRIPTION='`Cell` with volatile read / write operations' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=vcell CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/japaric/vcell' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.3 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name vcell --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vcell-0.1.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("const-fn"))' -C metadata=d16126ed2c83ce18 -C extra-filename=-929dacc6f0d21b3a --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5/Cargo.toml CARGO_PKG_AUTHORS='The Cortex-M Team <cortex-m@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>:Hideki Sekine <sekineh@me.com>' CARGO_PKG_DESCRIPTION='Minimal runtime / startup for Cortex-M microcontrollers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cortex-m-rt CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/cortex-m' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.7.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="device"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("device", "paint-stack", "set-sp", "set-vtor", "zero-init-ram"))' -C metadata=8f198628b714f2d6 -C extra-filename=-4b5a4380500c1678 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/cortex-m-rt-4b5a4380500c1678 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Portable atomic types including support for 128-bit atomics, atomic float, etc.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=portable-atomic CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/taiki-e/portable-atomic' CARGO_PKG_RUST_VERSION=1.34 CARGO_PKG_VERSION=1.11.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=11 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked '--warn=clippy::unused_trait_names' --warn=unreachable_pub --warn=unnameable_types --warn=unexpected_cfgs '--warn=clippy::undocumented_unsafe_blocks' '--warn=clippy::transmute_undefined_repr' '--warn=clippy::trailing_empty_array' --warn=single_use_lifetimes --warn=rust_2018_idioms '--warn=clippy::pedantic' --warn=non_ascii_idents '--warn=clippy::inline_asm_x86_att_syntax' --warn=improper_ctypes_definitions --warn=improper_ctypes --warn=deprecated_safe '--warn=clippy::default_union_representation' '--warn=clippy::as_underscore' '--warn=clippy::as_ptr_cast_mut' '--warn=clippy::all' '--allow=clippy::unreadable_literal' '--allow=clippy::type_complexity' '--allow=clippy::too_many_lines' '--allow=clippy::too_many_arguments' '--allow=clippy::struct_field_names' '--allow=clippy::struct_excessive_bools' '--allow=clippy::single_match_else' '--allow=clippy::single_match' '--allow=clippy::similar_names' '--allow=clippy::range_plus_one' '--allow=clippy::nonminimal_bool' '--allow=clippy::naive_bytecount' '--allow=clippy::module_name_repetitions' '--allow=clippy::missing_errors_doc' '--allow=clippy::manual_range_contains' '--allow=clippy::manual_assert' '--allow=clippy::lint_groups_priority' '--allow=clippy::incompatible_msrv' '--allow=clippy::float_cmp' '--allow=clippy::doc_markdown' '--allow=clippy::declare_interior_mutable_const' '--allow=clippy::cast_lossless' '--allow=clippy::borrow_as_ptr' '--allow=clippy::bool_assert_comparison' --check-cfg 'cfg(target_arch,values("xtensa"))' --check-cfg 'cfg(target_arch,values("amdgpu"))' --check-cfg 'cfg(target_arch,values("loongarch32"))' --check-cfg 'cfg(target_os,values("psx"))' --check-cfg 'cfg(target_env,values("psx"))' --check-cfg 'cfg(target_feature,values("lse2","lse128","rcpc3"))' --check-cfg 'cfg(target_feature,values("quadword-atomics"))' --check-cfg 'cfg(target_feature,values("zaamo","zabha"))' --check-cfg 'cfg(target_feature,values("zacas"))' --check-cfg 'cfg(target_pointer_width,values("128"))' --check-cfg 'cfg(portable_atomic_no_outline_atomics,portable_atomic_outline_atomics,portable_atomic_unstable_f16,portable_atomic_unstable_f128)' --check-cfg 'cfg(portable_atomic_unstable_coerce_unsized)' --check-cfg 'cfg(portable_atomic_test_detect_false,portable_atomic_test_no_std_static_assert_ffi,qemu,valgrind)' -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("critical-section", "default", "disable-fiq", "fallback", "float", "force-amo", "require-cas", "s-mode", "serde", "std", "unsafe-assume-single-core"))' -C metadata=ecd0a43ef761da7d -C extra-filename=-a9c0f78cc002a311 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/portable-atomic-a9c0f78cc002a311 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
warning: use of deprecated macro `try`: use the `?` operator instead
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-parser-0.7.0/src/version.rs:75:9
   |
75 |         try!(write!(f, "{}.{}.{}", self.major, self.minor, self.patch));
   |         ^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-parser-0.7.0/src/version.rs:79:13
   |
79 |             try!(write!(f, "-{}", strs.join(".")));
   |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-parser-0.7.0/src/version.rs:84:13
   |
84 |             try!(write!(f, "+{}", strs.join(".")));
   |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-parser-0.7.0/src/range.rs:184:22
    |
184 |     let predicates = try!(predicates);
    |                      ^^^

   Compiling nb v0.1.3
   Compiling volatile-register v0.2.2
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=nb CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nb-0.1.3 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nb-0.1.3/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Minimal non-blocking I/O layer' CARGO_PKG_HOMEPAGE='https://github.com/rust-embedded/nb' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=nb CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/nb' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.3 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name nb --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nb-0.1.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="unstable"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("unstable"))' -C metadata=65c35f1e413349fa -C extra-filename=-7b1c7f7d39f2d0a4 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern nb=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libnb-7627bedbeb0eefc1.rmeta --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=volatile_register CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/volatile-register-0.2.2 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/volatile-register-0.2.2/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <japaricious@gmail.com>:Jonathan '\''theJPster'\'' Pallant <github@thejpster.org.uk>' CARGO_PKG_DESCRIPTION='Volatile access to memory mapped hardware registers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=volatile-register CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/volatile-register' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name volatile_register --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/volatile-register-0.2.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=5b1715d10fa8e76a -C extra-filename=-09b5d5ca59296e1b --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern vcell=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libvcell-929dacc6f0d21b3a.rmeta --cap-lints warn -C panic=abort`
   Compiling critical-section v1.2.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=critical_section CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/critical-section-1.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/critical-section-1.2.0/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Cross-platform critical section' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=critical-section CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/critical-section' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.2.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name critical_section --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/critical-section-1.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="restore-state-bool"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("restore-state-bool", "restore-state-none", "restore-state-u16", "restore-state-u32", "restore-state-u64", "restore-state-u8", "restore-state-usize", "std"))' -C metadata=381bea9c368ae084 -C extra-filename=-cc77e411f04b5deb --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling bitfield v0.13.2
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=bitfield CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.13.2 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.13.2/Cargo.toml CARGO_PKG_AUTHORS='Loïc Damien <loic.damien@dzamlo.ch>' CARGO_PKG_DESCRIPTION='This crate provides macros to generate bitfield-like struct.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bitfield CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dzamlo/rust-bitfield' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.13.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=13 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name bitfield --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitfield-0.13.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=056fb2196f4ee794 -C extra-filename=-8342a66c52533fad --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling embedded-hal v0.2.7
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=embedded_hal CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/Cargo.toml CARGO_PKG_AUTHORS='The Embedded HAL Team <embedded-hal@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>:Jonathan '\''theJPster'\'' Pallant <github@thejpster.org.uk>' CARGO_PKG_DESCRIPTION=' A Hardware Abstraction Layer (HAL) for embedded systems ' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=embedded-hal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/embedded-hal' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name embedded_hal --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-0.2.7/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="unproven"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("unproven"))' -C metadata=9a23b0b2e2555d46 -C extra-filename=-3a0c5afa89b9df0e --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern nb=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libnb-7b1c7f7d39f2d0a4.rmeta --extern void=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libvoid-ac6d20138817a90f.rmeta --cap-lints warn -C panic=abort`
   Compiling heapless v0.8.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>:Per Lindgren <per.lindgren@ltu.se>:Emil Fresk <emil.fresk@gmail.com>' CARGO_PKG_DESCRIPTION='`static` friendly data structures that don'\''t require dynamic memory allocation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=heapless CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/heapless' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.8.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("defmt-03", "mpmc_large", "portable-atomic", "portable-atomic-critical-section", "portable-atomic-unsafe-assume-single-core", "serde", "ufmt"))' -C metadata=5b5375dcea138006 -C extra-filename=-ec7608d25ea715a6 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/heapless-ec7608d25ea715a6 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling stable_deref_trait v1.2.1
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=stable_deref_trait CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.1/Cargo.toml CARGO_PKG_AUTHORS='Robert Grosse <n210241048576@gmail.com>' CARGO_PKG_DESCRIPTION='An unsafe marker trait for types like Box and Rc that dereference to a stable address even when moved, and hence can be used with libraries such as owning_ref and rental.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stable_deref_trait CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/storyyeller/stable_deref_trait' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.2.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name stable_deref_trait --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "std"))' -C metadata=34d1f64858d5c288 -C extra-filename=-e9d3f6de904abbeb --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling semver v0.9.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=semver CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/Cargo.toml CARGO_PKG_AUTHORS='Steve Klabnik <steve@steveklabnik.com>:The Rust Project Developers' CARGO_PKG_DESCRIPTION='Semantic version parsing and comparison.
' CARGO_PKG_HOMEPAGE='https://docs.rs/crate/semver/' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=semver CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/steveklabnik/semver' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name semver --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="default"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("ci", "default", "serde"))' -C metadata=a73353345ff9628a -C extra-filename=-7146ebbc1e193259 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern semver_parser=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsemver_parser-6885d170c11881ef.rmeta --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=critical-section,critical-section-single-core CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_CRITICAL_SECTION=1 CARGO_FEATURE_CRITICAL_SECTION_SINGLE_CORE=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7 CARGO_MANIFEST_LINKS=cortex-m CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/Cargo.toml CARGO_PKG_AUTHORS='The Cortex-M Team <cortex-m@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Low level access to Cortex-M processors' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cortex-m CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/cortex-m' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.7.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/cortex-m-754ab2b6b3dbd7a9/build-script-build`
warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version.rs:271:9
    |
271 |         try!(write!(f, "{}.{}.{}", self.major, self.minor, self.patch));
    |         ^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version.rs:273:13
    |
273 |             try!(write!(f, "-"));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version.rs:278:17
    |
278 |                 try!(write!(f, "{}", x));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version.rs:276:21
    |
276 |                     try!(write!(f, "."))
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version.rs:282:13
    |
282 |             try!(write!(f, "+"));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version.rs:287:17
    |
287 |                 try!(write!(f, "{}", x));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version.rs:285:21
    |
285 |                     try!(write!(f, "."))
    |                     ^^^

warning: unused import: `std::result`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:13:5
   |
13 | use std::result;
   |     ^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:492:13
    |
492 |             try!(write!(fmt, "*"));
    |             ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:496:21
    |
496 |                     try!(write!(fmt, "{}", pred));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:498:21
    |
498 |                     try!(write!(fmt, ", {}", pred));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:510:32
    |
510 |             Wildcard(Major) => try!(write!(fmt, "*")),
    |                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:511:32
    |
511 |             Wildcard(Minor) => try!(write!(fmt, "{}.*", self.major)),
    |                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:514:21
    |
514 |                     try!(write!(fmt, "{}.{}.*", self.major, minor))
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:516:21
    |
516 |                     try!(write!(fmt, "{}.*.*", self.major))
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:520:17
    |
520 |                 try!(write!(fmt, "{}{}", self.op, self.major));
    |                 ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:523:32
    |
523 |                     Some(v) => try!(write!(fmt, ".{}", v)),
    |                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:528:32
    |
528 |                     Some(v) => try!(write!(fmt, ".{}", v)),
    |                                ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:533:21
    |
533 |                     try!(write!(fmt, "-"));
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:538:25
    |
538 |                         try!(write!(fmt, "{}", x));
    |                         ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:536:29
    |
536 | ...                   try!(write!(fmt, "."))
    |                       ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:551:19
    |
551 |             Ex => try!(write!(fmt, "= ")),
    |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:552:19
    |
552 |             Gt => try!(write!(fmt, "> ")),
    |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:553:21
    |
553 |             GtEq => try!(write!(fmt, ">= ")),
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:554:19
    |
554 |             Lt => try!(write!(fmt, "< ")),
    |                   ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:555:21
    |
555 |             LtEq => try!(write!(fmt, "<= ")),
    |                     ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:556:22
    |
556 |             Tilde => try!(write!(fmt, "~")),
    |                      ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:557:27
    |
557 |             Compatible => try!(write!(fmt, "^")),
    |                           ^^^

warning: use of deprecated macro `try`: use the `?` operator instead
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:559:28
    |
559 |             Wildcard(_) => try!(write!(fmt, "")),
    |                            ^^^

     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=device CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_DEVICE=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5 CARGO_MANIFEST_LINKS=cortex-m-rt CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5/Cargo.toml CARGO_PKG_AUTHORS='The Cortex-M Team <cortex-m@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>:Hideki Sekine <sekineh@me.com>' CARGO_PKG_DESCRIPTION='Minimal runtime / startup for Cortex-M microcontrollers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cortex-m-rt CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/cortex-m' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.7.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/cortex-m-rt-4b5a4380500c1678/build-script-build`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=default,proc-macro CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=aarch64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=aes,crc,dit,dotprod,dpb,dpb2,fcma,fhm,flagm,fp16,frintts,jsconv,lor,lse,neon,paca,pacg,pan,pmuv3,ras,rcpc,rcpc2,rdm,sb,sha2,sha3,ssbs,vh CARGO_CFG_TARGET_HAS_ATOMIC=128,16,32,64,8,ptr CARGO_CFG_TARGET_OS=macos CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=apple CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_PROC_MACRO=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Quasi-quoting macro quote'\!'(...)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=quote CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/quote' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.0.41 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=41 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=0 OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/quote-80264e8ecae9c9f2/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=aarch64-apple-darwin /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/quote-b9e6f215e52b6cc5/build-script-build`
warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/semver-0.9.0/src/version_req.rs:165:14
    |
165 |         self.description().fmt(f)
    |              ^^^^^^^^^^^

   Compiling byteorder v1.5.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=byteorder CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-1.5.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-1.5.0/Cargo.toml CARGO_PKG_AUTHORS='Andrew Gallant <jamslam@gmail.com>' CARGO_PKG_DESCRIPTION='Library for reading/writing numbers in big-endian and little-endian.' CARGO_PKG_HOMEPAGE='https://github.com/BurntSushi/byteorder' CARGO_PKG_LICENSE='Unlicense OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=byteorder CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/BurntSushi/byteorder' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.5.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=5 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name byteorder --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-1.5.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "i128", "std"))' -C metadata=f3ef358a7742eee1 -C extra-filename=-7f7c31c68d4b58a6 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=default,proc-macro CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=aarch64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=aes,crc,dit,dotprod,dpb,dpb2,fcma,fhm,flagm,fp16,frintts,jsconv,lor,lse,neon,paca,pacg,pan,pmuv3,ras,rcpc,rcpc2,rdm,sb,sha2,sha3,ssbs,vh CARGO_CFG_TARGET_HAS_ATOMIC=128,16,32,64,8,ptr CARGO_CFG_TARGET_OS=macos CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=apple CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_PROC_MACRO=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A substitute implementation of the compiler'\''s `proc_macro` API to decouple token-based libraries from the procedural macro use case.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/proc-macro2' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.0.103 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=103 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=0 OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/proc-macro2-3a8abd97d2dbd82e/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=aarch64-apple-darwin /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/proc-macro2-1dca823bd661a646/build-script-build`
warning: `semver-parser` (lib) generated 4 warnings
   Compiling thiserror v2.0.17
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='derive(Error)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=thiserror CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/thiserror' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.17 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=17 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=b0dad0d6483df97e -C extra-filename=-17e147101a856a03 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/thiserror-17e147101a856a03 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling rustc_version v0.2.3
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=rustc_version CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/Cargo.toml CARGO_PKG_AUTHORS='Marvin Löbel <loebel.marvin@gmail.com>' CARGO_PKG_DESCRIPTION='A library for querying the version of a installed rustc compiler' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustc_version CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/Kimundi/rustc-version-rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.3 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name rustc_version --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=f8fa9e0bdb6d1844 -C extra-filename=-498c37859e7c5eb5 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern semver=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsemver-7146ebbc1e193259.rmeta --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE='' CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>:Per Lindgren <per.lindgren@ltu.se>:Emil Fresk <emil.fresk@gmail.com>' CARGO_PKG_DESCRIPTION='`static` friendly data structures that don'\''t require dynamic memory allocation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=heapless CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/heapless' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.8.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/heapless-059dde899fe536ed/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/heapless-ec7608d25ea715a6/build-script-build`
warning: trait objects without an explicit `dyn` are deprecated
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/errors.rs:37:32
   |
37 |     fn cause(&self) -> Option<&error::Error> {
   |                                ^^^^^^^^^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
   |
37 |     fn cause(&self) -> Option<&dyn error::Error> {
   |                                +++

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/errors.rs:26:71
   |
26 |             CouldNotExecuteCommand(ref e) => write!(f, "{}: {}", self.description(), e),
   |                                                                       ^^^^^^^^^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/errors.rs:27:50
   |
27 |             Utf8Error(_) => write!(f, "{}", self.description()),
   |                                                  ^^^^^^^^^^^

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/errors.rs:28:61
   |
28 |             UnexpectedVersionFormat => write!(f, "{}", self.description()),
   |                                                             ^^^^^^^^^^^

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/errors.rs:29:62
   |
29 |             ReqParseError(ref e) => write!(f, "{}: {}", self.description(), e),
   |                                                              ^^^^^^^^^^^

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/errors.rs:30:60
   |
30 |             SemVerError(ref e) => write!(f, "{}: {}", self.description(), e),
   |                                                            ^^^^^^^^^^^

warning: use of deprecated method `std::error::Error::description`: use the Display impl or to_string()
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustc_version-0.2.3/src/errors.rs:31:69
   |
31 |             UnknownPreReleaseTag(ref i) => write!(f, "{}: {}", self.description(), i),
   |                                                                     ^^^^^^^^^^^

   Compiling hash32 v0.3.1
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=hash32 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hash32-0.3.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hash32-0.3.1/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='32-bit hashing algorithms' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=hash32 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/japaric/hash32' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name hash32 --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hash32-0.3.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=6a59ff42d9a206a9 -C extra-filename=-e418d710a3274e95 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern byteorder=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libbyteorder-7f7c31c68d4b58a6.rmeta --cap-lints warn -C panic=abort`
warning: `semver` (lib) generated 30 warnings
   Compiling serde_core v1.0.228
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Serde traits only, with no support for derive -- use the `serde` crate instead' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde_core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.228 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=228 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="result"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "rc", "result", "std", "unstable"))' -C metadata=1df79dd4ce2357f1 -C extra-filename=-3f1b0adb0e5f1f5d --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/serde_core-3f1b0adb0e5f1f5d -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling powerfmt v0.2.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=powerfmt CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/Cargo.toml CARGO_PKG_AUTHORS='Jacob Pratt <jacob@jhpratt.dev>' CARGO_PKG_DESCRIPTION='    `powerfmt` is a library that provides utilities for formatting values. This crate makes it
    significantly easier to support filling to a minimum width with alignment, avoid heap
    allocation, and avoid repetitive calculations.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=powerfmt CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/jhpratt/powerfmt' CARGO_PKG_RUST_VERSION=1.67.0 CARGO_PKG_VERSION=0.2.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name powerfmt --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "macros", "std"))' -C metadata=3fae49e496b315e9 -C extra-filename=-65f1a7e43da0fe32 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE='' CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Portable atomic types including support for 128-bit atomics, atomic float, etc.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=portable-atomic CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/taiki-e/portable-atomic' CARGO_PKG_RUST_VERSION=1.34 CARGO_PKG_VERSION=1.11.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=11 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/portable-atomic-d8eb9aee52fd3998/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/portable-atomic-a9c0f78cc002a311/build-script-build`
[cortex-m 0.7.7] cargo:rustc-link-lib=static=cortex-m
[cortex-m 0.7.7] cargo:rustc-link-search=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out
[cortex-m 0.7.7] cargo:rustc-cfg=cortex_m
[cortex-m 0.7.7] cargo:rustc-cfg=armv7m
[cortex-m 0.7.7] cargo:rustc-cfg=armv7em
[cortex-m 0.7.7] cargo:rustc-cfg=has_fpu
   Compiling hashbrown v0.16.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=hashbrown CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.16.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.16.0/Cargo.toml CARGO_PKG_AUTHORS='Amanieu d'\''Antras <amanieu@gmail.com>' CARGO_PKG_DESCRIPTION='A Rust port of Google'\''s SwissTable hash map' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=hashbrown CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/hashbrown' CARGO_PKG_RUST_VERSION=1.65.0 CARGO_PKG_VERSION=0.16.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=16 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name hashbrown --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.16.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "allocator-api2", "core", "default", "default-hasher", "equivalent", "inline-more", "nightly", "raw-entry", "rayon", "rustc-dep-of-std", "rustc-internal-api", "serde"))' -C metadata=39ff0cafb8f2ea7d -C extra-filename=-4cf847f6046c6e42 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
warning: unexpected `cfg` condition name: `__powerfmt_docs`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/lib.rs:6:13
  |
6 | #![cfg_attr(__powerfmt_docs, feature(doc_auto_cfg, rustc_attrs))]
  |             ^^^^^^^^^^^^^^^
  |
  = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(__powerfmt_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(__powerfmt_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `__powerfmt_docs`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/lib.rs:7:13
  |
7 | #![cfg_attr(__powerfmt_docs, allow(internal_features))]
  |             ^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(__powerfmt_docs)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(__powerfmt_docs)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `__powerfmt_docs`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/powerfmt-0.2.0/src/smart_display.rs:629:12
    |
629 | #[cfg_attr(__powerfmt_docs, rustc_must_implement_one_of(fmt, fmt_with_metadata))]
    |            ^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(__powerfmt_docs)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(__powerfmt_docs)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `rustc_version` (lib) generated 7 warnings
   Compiling bare-metal v0.2.5
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Abstractions common to bare metal systems' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bare-metal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/japaric/bare-metal' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="const-fn"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("const-fn"))' -C metadata=a47f20f103691869 -C extra-filename=-788123b34442c0a5 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/bare-metal-788123b34442c0a5 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern rustc_version=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/librustc_version-498c37859e7c5eb5.rlib --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE='' CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='derive(Error)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=thiserror CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/thiserror' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.17 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=17 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/thiserror-650f379cddfce376/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/thiserror-17e147101a856a03/build-script-build`
warning: `powerfmt` (lib) generated 3 warnings
   Compiling synopsys-usb-otg v0.4.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/Cargo.toml CARGO_PKG_AUTHORS='Vadim Kaushan <admin@disasm.info>' CARGO_PKG_DESCRIPTION=''\''usb-device'\'' implementation for Synopsys USB OTG IP cores' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=synopsys-usb-otg CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/synopsys-usb-otg' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="cortex-m"' --cfg 'feature="fs"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("cortex-m", "fs", "hs", "riscv", "xcvrdly"))' -C metadata=c1fbd000e01cbfaa -C extra-filename=-fd205a59fd24bb1d --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/synopsys-usb-otg-fd205a59fd24bb1d -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=const-fn CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_CONST_FN=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Abstractions common to bare metal systems' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bare-metal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/japaric/bare-metal' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/bare-metal-10c6980db7201557/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/bare-metal-788123b34442c0a5/build-script-build`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=result CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_RESULT=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Serde traits only, with no support for derive -- use the `serde` crate instead' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde_core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.228 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=228 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/serde_core-066360e9fdac59a5/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/serde_core-3f1b0adb0e5f1f5d/build-script-build`
[cortex-m-rt 0.7.5] cargo:rustc-check-cfg=cfg(armv6m)
[cortex-m-rt 0.7.5] cargo:rustc-check-cfg=cfg(armv7m)
[cortex-m-rt 0.7.5] cargo:rustc-check-cfg=cfg(armv8m)
[cortex-m-rt 0.7.5] cargo:rustc-check-cfg=cfg(cortex_m)
[cortex-m-rt 0.7.5] cargo:rustc-check-cfg=cfg(has_fpu)
[cortex-m-rt 0.7.5] cargo:rustc-cfg=cortex_m
[cortex-m-rt 0.7.5] cargo:rustc-cfg=armv7m
[cortex-m-rt 0.7.5] cargo:rustc-cfg=has_fpu
[cortex-m-rt 0.7.5] cargo:rustc-link-search=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out
[cortex-m-rt 0.7.5] cargo:rerun-if-changed=build.rs
[cortex-m-rt 0.7.5] cargo:rerun-if-changed=link.x.in
   Compiling equivalent v1.0.2
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=equivalent CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Traits for key comparison in maps.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=equivalent CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/indexmap-rs/equivalent' CARGO_PKG_RUST_VERSION=1.6 CARGO_PKG_VERSION=1.0.2 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name equivalent --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=3a918ab5f43864e2 -C extra-filename=-0dc088c1a99ef20c --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling gcd v2.3.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=gcd CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gcd-2.3.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gcd-2.3.0/Cargo.toml CARGO_PKG_AUTHORS='Corey Farwell <coreyf@rwell.org>' CARGO_PKG_DESCRIPTION='Calculate the greatest common divisor' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=gcd CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/frewsxcv/rust-gcd' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=2.3.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name gcd --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/gcd-2.3.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=af2f8b87b61373bd -C extra-filename=-e19dc0d41d363385 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling serde v1.0.228
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A generic serialization/deserialization framework' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.228 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=228 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="derive"' --cfg 'feature="serde_derive"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' -C metadata=463418a26ad443a8 -C extra-filename=-db381791f1b8235d --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/serde-db381791f1b8235d -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling stm32f4-staging v0.16.1
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1/Cargo.toml CARGO_PKG_AUTHORS='Adam Greig <adam@adamgreig.com>:stm32-rs Contributors' CARGO_PKG_DESCRIPTION='Device support crates for STM32F4 devices' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4-staging CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32-rs' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.16.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=16 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="atomics"' --cfg 'feature="cortex-m-rt"' --cfg 'feature="critical-section"' --cfg 'feature="default"' --cfg 'feature="rt"' --cfg 'feature="stm32f411"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("atomics", "cortex-m-rt", "critical-section", "default", "defmt", "rt", "stm32f401", "stm32f405", "stm32f407", "stm32f410", "stm32f411", "stm32f412", "stm32f413", "stm32f427", "stm32f429", "stm32f446", "stm32f469"))' -C metadata=5a0b234057ac1320 -C extra-filename=-b372ab9beeb12940 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/stm32f4-staging-b372ab9beeb12940 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
[quote 1.0.41] cargo:rerun-if-changed=build.rs
[quote 1.0.41] cargo:rustc-check-cfg=cfg(no_diagnostic_namespace)
   Compiling fugit v0.3.7
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=fugit CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fugit-0.3.7 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fugit-0.3.7/Cargo.toml CARGO_PKG_AUTHORS='Emil Fresk <emil.fresk@gmail.com>' CARGO_PKG_DESCRIPTION='Time library for embedded targets with ease-of-use and performance first.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=fugit CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/korken89/fugit' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name fugit --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fugit-0.3.7/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("defmt"))' -C metadata=ffb6f274d4cf21a3 -C extra-filename=-a866a225a0e342c0 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern gcd=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libgcd-e19dc0d41d363385.rmeta --cap-lints warn -C panic=abort`
   Compiling indexmap v2.12.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=indexmap CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.12.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.12.0/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A hash table with consistent order and fast iteration.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=indexmap CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/indexmap-rs/indexmap' CARGO_PKG_RUST_VERSION=1.82 CARGO_PKG_VERSION=2.12.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=12 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name indexmap --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.12.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked --deny=unsafe-code --deny=unreachable-pub --deny=unnameable-types '--allow=clippy::style' --warn=rust-2018-idioms --deny=private-interfaces --deny=private-bounds -C debug-assertions=off --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("arbitrary", "borsh", "default", "quickcheck", "rayon", "serde", "std", "sval", "test_debug"))' -C metadata=4081fc0f0acc2e2d -C extra-filename=-a7e6bc7c3c6242fc --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern equivalent=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libequivalent-0dc088c1a99ef20c.rmeta --extern hashbrown=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libhashbrown-4cf847f6046c6e42.rmeta --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=atomics,cortex-m-rt,critical-section,default,rt,stm32f411 CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_ATOMICS=1 CARGO_FEATURE_CORTEX_M_RT=1 CARGO_FEATURE_CRITICAL_SECTION=1 CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_RT=1 CARGO_FEATURE_STM32F411=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1/Cargo.toml CARGO_PKG_AUTHORS='Adam Greig <adam@adamgreig.com>:stm32-rs Contributors' CARGO_PKG_DESCRIPTION='Device support crates for STM32F4 devices' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4-staging CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32-rs' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.16.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=16 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-staging-83aed20f91313826/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/stm32f4-staging-b372ab9beeb12940/build-script-build`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=derive,serde_derive CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_DERIVE=1 CARGO_FEATURE_SERDE_DERIVE=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A generic serialization/deserialization framework' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.228 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=228 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/serde-2f32460362756bd4/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/serde-db381791f1b8235d/build-script-build`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=cortex-m,fs CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_CORTEX_M=1 CARGO_FEATURE_FS=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/Cargo.toml CARGO_PKG_AUTHORS='Vadim Kaushan <admin@disasm.info>' CARGO_PKG_DESCRIPTION=''\''usb-device'\'' implementation for Synopsys USB OTG IP cores' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=synopsys-usb-otg CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/synopsys-usb-otg' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/synopsys-usb-otg-86c729426f1c43ab/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/synopsys-usb-otg-fd205a59fd24bb1d/build-script-build`
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(fuzzing)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(no_is_available)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(no_literal_byte_character)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(no_literal_c_string)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(no_source_text)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(proc_macro_span)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(proc_macro_span_file)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(proc_macro_span_location)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(procmacro2_backtrace)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(procmacro2_build_probe)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(procmacro2_nightly_testing)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(procmacro2_semver_exempt)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(randomize_layout)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(span_locations)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(super_unstable)
[proc-macro2 1.0.103] cargo:rustc-check-cfg=cfg(wrap_proc_macro)
[proc-macro2 1.0.103] cargo:rerun-if-changed=src/probe/proc_macro_span.rs
[proc-macro2 1.0.103] cargo:rustc-cfg=wrap_proc_macro
[proc-macro2 1.0.103] cargo:rerun-if-env-changed=RUSTC_BOOTSTRAP
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=proc_macro2 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A substitute implementation of the compiler'\''s `proc_macro` API to decouple token-based libraries from the procedural macro use case.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/proc-macro2' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.0.103 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=103 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/proc-macro2-3a8abd97d2dbd82e/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name proc_macro2 --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.103/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="default"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' -C metadata=3a9efe6575d2bb4f -C extra-filename=-cd0a33a50dfe2288 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern unicode_ident=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libunicode_ident-ee7f45f67db08b88.rmeta --cap-lints warn --cfg wrap_proc_macro --check-cfg 'cfg(fuzzing)' --check-cfg 'cfg(no_is_available)' --check-cfg 'cfg(no_literal_byte_character)' --check-cfg 'cfg(no_literal_c_string)' --check-cfg 'cfg(no_source_text)' --check-cfg 'cfg(proc_macro_span)' --check-cfg 'cfg(proc_macro_span_file)' --check-cfg 'cfg(proc_macro_span_location)' --check-cfg 'cfg(procmacro2_backtrace)' --check-cfg 'cfg(procmacro2_build_probe)' --check-cfg 'cfg(procmacro2_nightly_testing)' --check-cfg 'cfg(procmacro2_semver_exempt)' --check-cfg 'cfg(randomize_layout)' --check-cfg 'cfg(span_locations)' --check-cfg 'cfg(super_unstable)' --check-cfg 'cfg(wrap_proc_macro)'`
[heapless 0.8.0] cargo:rustc-cfg=arm_llsc
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=heapless CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>:Per Lindgren <per.lindgren@ltu.se>:Emil Fresk <emil.fresk@gmail.com>' CARGO_PKG_DESCRIPTION='`static` friendly data structures that don'\''t require dynamic memory allocation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=heapless CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/heapless' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.8.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/heapless-059dde899fe536ed/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name heapless --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("defmt-03", "mpmc_large", "portable-atomic", "portable-atomic-critical-section", "portable-atomic-unsafe-assume-single-core", "serde", "ufmt"))' -C metadata=cdd6e4d2595280aa -C extra-filename=-75b9612e6192ae87 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern hash32=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libhash32-e418d710a3274e95.rmeta --extern stable_deref_trait=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libstable_deref_trait-e9d3f6de904abbeb.rmeta --cap-lints warn -C panic=abort --cfg arm_llsc`
warning: unexpected `cfg` condition name: `arm_llsc`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/lib.rs:47:9
   |
47 |     any(arm_llsc, target_arch = "x86"),
   |         ^^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(arm_llsc)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(arm_llsc)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
note: the lint level is defined here
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/lib.rs:85:9
   |
85 | #![deny(warnings)]
   |         ^^^^^^^^
   = note: `#[warn(unexpected_cfgs)]` implied by `#[warn(warnings)]`

warning: unexpected `cfg` condition name: `arm_llsc`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/lib.rs:51:9
   |
51 |     any(arm_llsc, target_arch = "x86"),
   |         ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(arm_llsc)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(arm_llsc)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `arm_llsc`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/lib.rs:59:9
   |
59 |     any(arm_llsc, target_arch = "x86"),
   |         ^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(arm_llsc)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(arm_llsc)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `arm_llsc`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/lib.rs:128:11
    |
128 | #[cfg(any(arm_llsc, target_arch = "x86"))]
    |           ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(arm_llsc)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(arm_llsc)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_atomic_load_store`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/lib.rs:138:5
    |
138 |     has_atomic_load_store
    |     ^^^^^^^^^^^^^^^^^^^^^ help: there is a config with a similar name: `target_has_atomic_load_store`
    |
    = help: expected values for `target_has_atomic_load_store` are: `128`, `16`, `32`, `64`, `8`, and `ptr`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_atomic_load_store)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_atomic_load_store)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `arm_llsc`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/pool/treiber.rs:4:12
  |
4 | #[cfg_attr(arm_llsc, path = "treiber/llsc.rs")]
  |            ^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(arm_llsc)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(arm_llsc)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `arm_llsc`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heapless-0.8.0/src/pool/treiber/llsc.rs:115:7
    |
115 | #[cfg(arm_llsc)]
    |       ^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(arm_llsc)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(arm_llsc)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=quote CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Quasi-quoting macro quote'\!'(...)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=quote CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/quote' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.0.41 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=41 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/quote-80264e8ecae9c9f2/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name quote --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.41/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="default"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "proc-macro"))' -C metadata=e2636643a5a48896 -C extra-filename=-f36e0e7cad69e1d5 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rmeta --cap-lints warn --check-cfg 'cfg(no_diagnostic_namespace)'`
[portable-atomic 1.11.1] cargo:rerun-if-changed=build.rs
[portable-atomic 1.11.1] cargo:rerun-if-changed=src/gen/build.rs
[portable-atomic 1.11.1] cargo:rerun-if-changed=version.rs
[portable-atomic 1.11.1] cargo:rustc-check-cfg=cfg(target_feature,values("lsfe","fast-serialization","load-store-on-cond","distinct-ops","miscellaneous-extensions-3"))
[portable-atomic 1.11.1] cargo:rustc-check-cfg=cfg(portable_atomic_disable_fiq,portable_atomic_force_amo,portable_atomic_ll_sc_rmw,portable_atomic_atomic_intrinsics,portable_atomic_no_asm,portable_atomic_no_asm_maybe_uninit,portable_atomic_no_atomic_64,portable_atomic_no_atomic_cas,portable_atomic_no_atomic_load_store,portable_atomic_no_atomic_min_max,portable_atomic_no_cfg_target_has_atomic,portable_atomic_no_cmpxchg16b_intrinsic,portable_atomic_no_cmpxchg16b_target_feature,portable_atomic_no_const_mut_refs,portable_atomic_no_const_raw_ptr_deref,portable_atomic_no_const_transmute,portable_atomic_no_core_unwind_safe,portable_atomic_no_diagnostic_namespace,portable_atomic_no_offset_of,portable_atomic_no_strict_provenance,portable_atomic_no_stronger_failure_ordering,portable_atomic_no_track_caller,portable_atomic_no_unsafe_op_in_unsafe_fn,portable_atomic_pre_llvm_15,portable_atomic_pre_llvm_16,portable_atomic_pre_llvm_18,portable_atomic_pre_llvm_20,portable_atomic_s_mode,portable_atomic_sanitize_thread,portable_atomic_target_feature,portable_atomic_unsafe_assume_single_core,portable_atomic_unstable_asm,portable_atomic_unstable_asm_experimental_arch,portable_atomic_unstable_cfg_target_has_atomic,portable_atomic_unstable_isa_attribute)
[portable-atomic 1.11.1] cargo:rustc-check-cfg=cfg(portable_atomic_target_feature,values("cmpxchg16b","distinct-ops","fast-serialization","load-store-on-cond","lse","lse128","lse2","lsfe","mclass","miscellaneous-extensions-3","quadword-atomics","rcpc3","v6","zaamo","zabha","zacas"))
[portable-atomic 1.11.1] cargo:rustc-cfg=portable_atomic_target_feature="v6"
[portable-atomic 1.11.1] cargo:rustc-cfg=portable_atomic_target_feature="mclass"
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=portable_atomic CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Portable atomic types including support for 128-bit atomics, atomic float, etc.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=portable-atomic CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/taiki-e/portable-atomic' CARGO_PKG_RUST_VERSION=1.34 CARGO_PKG_VERSION=1.11.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=11 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/portable-atomic-d8eb9aee52fd3998/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name portable_atomic --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 '--warn=clippy::unused_trait_names' --warn=unreachable_pub --warn=unnameable_types --warn=unexpected_cfgs '--warn=clippy::undocumented_unsafe_blocks' '--warn=clippy::transmute_undefined_repr' '--warn=clippy::trailing_empty_array' --warn=single_use_lifetimes --warn=rust_2018_idioms '--warn=clippy::pedantic' --warn=non_ascii_idents '--warn=clippy::inline_asm_x86_att_syntax' --warn=improper_ctypes_definitions --warn=improper_ctypes --warn=deprecated_safe '--warn=clippy::default_union_representation' '--warn=clippy::as_underscore' '--warn=clippy::as_ptr_cast_mut' '--warn=clippy::all' '--allow=clippy::unreadable_literal' '--allow=clippy::type_complexity' '--allow=clippy::too_many_lines' '--allow=clippy::too_many_arguments' '--allow=clippy::struct_field_names' '--allow=clippy::struct_excessive_bools' '--allow=clippy::single_match_else' '--allow=clippy::single_match' '--allow=clippy::similar_names' '--allow=clippy::range_plus_one' '--allow=clippy::nonminimal_bool' '--allow=clippy::naive_bytecount' '--allow=clippy::module_name_repetitions' '--allow=clippy::missing_errors_doc' '--allow=clippy::manual_range_contains' '--allow=clippy::manual_assert' '--allow=clippy::lint_groups_priority' '--allow=clippy::incompatible_msrv' '--allow=clippy::float_cmp' '--allow=clippy::doc_markdown' '--allow=clippy::declare_interior_mutable_const' '--allow=clippy::cast_lossless' '--allow=clippy::borrow_as_ptr' '--allow=clippy::bool_assert_comparison' --check-cfg 'cfg(target_arch,values("xtensa"))' --check-cfg 'cfg(target_arch,values("amdgpu"))' --check-cfg 'cfg(target_arch,values("loongarch32"))' --check-cfg 'cfg(target_os,values("psx"))' --check-cfg 'cfg(target_env,values("psx"))' --check-cfg 'cfg(target_feature,values("lse2","lse128","rcpc3"))' --check-cfg 'cfg(target_feature,values("quadword-atomics"))' --check-cfg 'cfg(target_feature,values("zaamo","zabha"))' --check-cfg 'cfg(target_feature,values("zacas"))' --check-cfg 'cfg(target_pointer_width,values("128"))' --check-cfg 'cfg(portable_atomic_no_outline_atomics,portable_atomic_outline_atomics,portable_atomic_unstable_f16,portable_atomic_unstable_f128)' --check-cfg 'cfg(portable_atomic_unstable_coerce_unsized)' --check-cfg 'cfg(portable_atomic_test_detect_false,portable_atomic_test_no_std_static_assert_ffi,qemu,valgrind)' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("critical-section", "default", "disable-fiq", "fallback", "float", "force-amo", "require-cas", "s-mode", "serde", "std", "unsafe-assume-single-core"))' -C metadata=fe725c69e2b609fb -C extra-filename=-8957a256d69dad9b --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort --cfg 'portable_atomic_target_feature="v6"' --cfg 'portable_atomic_target_feature="mclass"' --check-cfg 'cfg(target_feature,values("lsfe","fast-serialization","load-store-on-cond","distinct-ops","miscellaneous-extensions-3"))' --check-cfg 'cfg(portable_atomic_disable_fiq,portable_atomic_force_amo,portable_atomic_ll_sc_rmw,portable_atomic_atomic_intrinsics,portable_atomic_no_asm,portable_atomic_no_asm_maybe_uninit,portable_atomic_no_atomic_64,portable_atomic_no_atomic_cas,portable_atomic_no_atomic_load_store,portable_atomic_no_atomic_min_max,portable_atomic_no_cfg_target_has_atomic,portable_atomic_no_cmpxchg16b_intrinsic,portable_atomic_no_cmpxchg16b_target_feature,portable_atomic_no_const_mut_refs,portable_atomic_no_const_raw_ptr_deref,portable_atomic_no_const_transmute,portable_atomic_no_core_unwind_safe,portable_atomic_no_diagnostic_namespace,portable_atomic_no_offset_of,portable_atomic_no_strict_provenance,portable_atomic_no_stronger_failure_ordering,portable_atomic_no_track_caller,portable_atomic_no_unsafe_op_in_unsafe_fn,portable_atomic_pre_llvm_15,portable_atomic_pre_llvm_16,portable_atomic_pre_llvm_18,portable_atomic_pre_llvm_20,portable_atomic_s_mode,portable_atomic_sanitize_thread,portable_atomic_target_feature,portable_atomic_unsafe_assume_single_core,portable_atomic_unstable_asm,portable_atomic_unstable_asm_experimental_arch,portable_atomic_unstable_cfg_target_has_atomic,portable_atomic_unstable_isa_attribute)' --check-cfg 'cfg(portable_atomic_target_feature,values("cmpxchg16b","distinct-ops","fast-serialization","load-store-on-cond","lse","lse128","lse2","lsfe","mclass","miscellaneous-extensions-3","quadword-atomics","rcpc3","v6","zaamo","zabha","zacas"))'`
[thiserror 2.0.17] cargo:rerun-if-changed=build/probe.rs
[thiserror 2.0.17] cargo:rustc-check-cfg=cfg(error_generic_member_access)
[thiserror 2.0.17] cargo:rustc-check-cfg=cfg(thiserror_nightly_testing)
[thiserror 2.0.17] cargo:rustc-check-cfg=cfg(thiserror_no_backtrace_type)
[thiserror 2.0.17] cargo:rerun-if-env-changed=RUSTC_BOOTSTRAP
   Compiling deranged v0.5.5
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=deranged CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/deranged-0.5.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/deranged-0.5.5/Cargo.toml CARGO_PKG_AUTHORS='Jacob Pratt <jacob@jhpratt.dev>' CARGO_PKG_DESCRIPTION='Ranged integers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=deranged CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/jhpratt/deranged' CARGO_PKG_RUST_VERSION=1.81.0 CARGO_PKG_VERSION=0.5.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=5 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name deranged --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/deranged-0.5.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --warn=unused '--warn=clippy::nursery' '--warn=clippy::all' --warn=variant-size-differences '--warn=clippy::use-debug' '--warn=clippy::unwrap-used' '--warn=clippy::unwrap-in-result' --warn=unused-qualifications --warn=unused-lifetimes --warn=unused-import-braces --deny=unstable-syntax-pre-expansion --deny=unsafe-op-in-unsafe-fn --warn=unreachable-pub '--warn=clippy::unnested-or-patterns' --deny=unnameable-test-items '--warn=clippy::uninlined-format-args' '--warn=clippy::unimplemented' '--warn=rustdoc::unescaped-backticks' '--deny=clippy::undocumented-unsafe-blocks' --deny=unconditional-recursion --warn=trivial-numeric-casts --warn=trivial-casts '--warn=clippy::todo' --deny=suspicious-double-ref-op '--deny=clippy::std-instead-of-core' --warn=single-use-lifetimes '--warn=clippy::semicolon-outside-block' '--allow=clippy::redundant-pub-crate' '--warn=rustdoc::private-doc-tests' '--warn=clippy::print-stdout' --deny=overlapping-range-endpoints '--allow=clippy::option-if-let-else' --deny=opaque-hidden-inferred-bound '--warn=clippy::obfuscated-if-else' --warn=noop-method-call --deny=non-ascii-idents --deny=named-arguments-used-positionally '--warn=clippy::missing-enforced-import-renames' '--warn=clippy::missing-docs-in-private-items' --warn=missing-docs --warn=missing-debug-implementations --warn=missing-copy-implementations --warn=missing-abi --warn=meta-variable-misuse '--warn=clippy::manual-let-else' --warn=macro-use-extern-crate --warn=let-underscore --warn=keyword-idents --deny=invalid-value --deny=invalid-reference-casting --deny=invalid-nan-comparisons --deny=invalid-macro-export-arguments --deny=invalid-from-utf8 --deny=improper-ctypes-definitions --deny=improper-ctypes --deny=hidden-glob-reexports '--warn=clippy::get-unwrap' --deny=future-incompatible '--warn=clippy::explicit-auto-deref' --deny=drop-bounds --deny=deref-nullptr '--warn=clippy::decimal-literal-representation' '--warn=clippy::dbg-macro' --deny=dangling-pointers-from-temporaries --deny=const-item-mutation --deny=clashing-extern-declarations --deny=ambiguous-glob-reexports '--deny=clippy::alloc-instead-of-core' --warn=unstable-name-collisions --allow=path-statements --cfg 'feature="default"' --cfg 'feature="powerfmt"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "macros", "num", "powerfmt", "quickcheck", "rand", "rand08", "rand09", "serde"))' -C metadata=7a941b7cb0528089 -C extra-filename=-bab994001e948864 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern powerfmt=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libpowerfmt-65f1a7e43da0fe32.rmeta --cap-lints warn -C panic=abort`
   Compiling syn v2.0.108
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=syn CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.108 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.108/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.68 CARGO_PKG_VERSION=2.0.108 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=108 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name syn --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.108/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="clone-impls"' --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="extra-traits"' --cfg 'feature="full"' --cfg 'feature="parsing"' --cfg 'feature="printing"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "test", "visit", "visit-mut"))' -C metadata=a2faffae192e2251 -C extra-filename=-ee2207adf5f92674 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rmeta --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rmeta --extern unicode_ident=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libunicode_ident-ee7f45f67db08b88.rmeta --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=bare_metal CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Abstractions common to bare metal systems' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bare-metal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/japaric/bare-metal' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/bare-metal-10c6980db7201557/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name bare_metal --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-0.2.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="const-fn"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("const-fn"))' -C metadata=fecb4f43dde7a77a -C extra-filename=-8ee2fe9910271e9a --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=cortex_m CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/Cargo.toml CARGO_PKG_AUTHORS='The Cortex-M Team <cortex-m@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Low level access to Cortex-M processors' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cortex-m CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/cortex-m' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.7.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name cortex_m --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="critical-section"' --cfg 'feature="critical-section-single-core"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("cm7", "cm7-r0p1", "critical-section", "critical-section-single-core", "inline-asm", "linker-plugin-lto", "serde", "std"))' -C metadata=df971a9507289c6b -C extra-filename=-e574693899d41b52 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern bare_metal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libbare_metal-8ee2fe9910271e9a.rmeta --extern bitfield=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libbitfield-8342a66c52533fad.rmeta --extern critical_section=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcritical_section-cc77e411f04b5deb.rmeta --extern embedded_hal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_hal-3a0c5afa89b9df0e.rmeta --extern volatile_register=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libvolatile_register-09b5d5ca59296e1b.rmeta --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out -l static=cortex-m --cfg cortex_m --cfg armv7m --cfg armv7em --cfg has_fpu`
   Compiling proc-macro-error-attr2 v2.0.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=proc_macro_error_attr2 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr2-2.0.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr2-2.0.0/Cargo.toml CARGO_PKG_AUTHORS='CreepySkeleton <creepy-skeleton@yandex.ru>:GnomedDev <david2005thomas@gmail.com>' CARGO_PKG_DESCRIPTION='Attribute macro for the proc-macro-error2 crate' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro-error-attr2 CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/GnomedDev/proc-macro-error-2' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name proc_macro_error_attr2 --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error-attr2-2.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked '--warn=clippy::pedantic' -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=2c54177f20785fdd -C extra-filename=-0d40ad0fe00179d6 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rlib --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rlib --extern proc_macro --cap-lints warn`
warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/lib.rs:101:7
    |
101 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/lib.rs:106:15
    |
106 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/lib.rs:106:28
    |
106 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |                            ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/asm.rs:101:7
    |
101 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/asm.rs:116:7
    |
116 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/asm.rs:132:7
    |
132 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/asm.rs:148:7
    |
148 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/asm.rs:161:7
    |
161 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `cortex_m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/critical_section.rs:1:11
  |
1 | #[cfg(all(cortex_m, feature = "critical-section-single-core"))]
  |           ^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(cortex_m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(cortex_m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `cm7`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:65:7
   |
65 | #[cfg(cm7)]
   |       ^^^ help: found config with similar value: `feature = "cm7"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(cm7)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(cm7)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:67:11
   |
67 | #[cfg(not(armv6m))]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:72:11
   |
72 | #[cfg(not(armv6m))]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:75:11
   |
75 | #[cfg(any(has_fpu, native))]
   |           ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:75:20
   |
75 | #[cfg(any(has_fpu, native))]
   |                    ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:78:15
   |
78 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:78:28
   |
78 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |                            ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:82:7
   |
82 | #[cfg(armv8m)]
   |       ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:86:11
   |
86 | #[cfg(not(armv6m))]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `cm7`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:235:7
    |
235 | #[cfg(cm7)]
    |       ^^^ help: found config with similar value: `feature = "cm7"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(cm7)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(cm7)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `cm7`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:240:7
    |
240 | #[cfg(cm7)]
    |       ^^^ help: found config with similar value: `feature = "cm7"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(cm7)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(cm7)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `cm7`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:243:7
    |
243 | #[cfg(cm7)]
    |       ^^^ help: found config with similar value: `feature = "cm7"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(cm7)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(cm7)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:263:11
    |
263 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:283:11
    |
283 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:384:11
    |
384 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:397:11
    |
397 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:414:11
    |
414 | #[cfg(any(has_fpu, native))]
    |           ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:414:20
    |
414 | #[cfg(any(has_fpu, native))]
    |                    ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:427:11
    |
427 | #[cfg(any(has_fpu, native))]
    |           ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:427:20
    |
427 | #[cfg(any(has_fpu, native))]
    |                    ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:484:15
    |
484 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:484:28
    |
484 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |                            ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:497:15
    |
497 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:497:28
    |
497 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |                            ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:507:15
    |
507 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:507:28
    |
507 | #[cfg(all(not(armv6m), not(armv8m_base)))]
    |                            ^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:578:7
    |
578 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:591:7
    |
591 | #[cfg(armv8m)]
    |       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:664:11
    |
664 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:677:11
    |
677 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:4:11
  |
4 | #[cfg(not(armv6m))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:7:11
  |
7 | #[cfg(not(armv6m))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:68:11
   |
68 | #[cfg(not(armv6m))]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:77:11
   |
77 | #[cfg(not(armv6m))]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:19:15
   |
19 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:21:11
   |
21 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:25:15
   |
25 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:27:11
   |
27 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:31:15
   |
31 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:33:11
   |
33 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:37:15
   |
37 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:39:11
   |
39 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:43:15
   |
43 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:45:11
   |
45 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:51:15
   |
51 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:55:15
   |
55 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:59:15
   |
59 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/cpuid.rs:63:15
   |
63 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:3:11
  |
3 | #[cfg(not(armv6m))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:15:15
   |
15 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:18:15
   |
18 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:21:15
   |
21 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:24:15
   |
24 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:27:15
   |
27 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

[serde_core 1.0.228] cargo:rerun-if-changed=build.rs
warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:30:15
   |
30 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:33:11
   |
33 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:38:11
   |
38 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:40:15
   |
40 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:43:15
   |
43 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:46:15
   |
46 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:49:15
   |
49 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:84:15
   |
84 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:92:15
   |
92 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:100:15
    |
100 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:108:15
    |
108 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:123:15
    |
123 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:130:15
    |
130 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:137:15
    |
137 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:145:15
    |
145 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:156:15
    |
156 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:164:15
    |
164 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:173:15
    |
173 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:187:15
    |
187 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:195:15
    |
195 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:202:15
    |
202 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:210:15
    |
210 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:223:15
    |
223 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:231:15
    |
231 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:238:15
    |
238 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:246:15
    |
246 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:255:15
    |
255 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(if_docsrs_then_no_serde_core)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_core_cstr)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_core_error)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_core_net)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_core_num_saturating)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_diagnostic_namespace)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_serde_derive)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_std_atomic)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_std_atomic64)
[serde_core 1.0.228] cargo:rustc-check-cfg=cfg(no_target_has_atomic)
warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/dwt.rs:263:15
    |
263 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv7m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:3:11
  |
3 | #[cfg(any(armv7m, armv8m, native))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv7m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv7m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:3:19
  |
3 | #[cfg(any(armv7m, armv8m, native))]
  |                   ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:3:27
  |
3 | #[cfg(any(armv7m, armv8m, native))]
  |                           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv7m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:15:15
   |
15 |     #[cfg(any(armv7m, armv8m, native))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv7m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv7m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:15:23
   |
15 |     #[cfg(any(armv7m, armv8m, native))]
   |                       ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:15:31
   |
15 |     #[cfg(any(armv7m, armv8m, native))]
   |                               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv7m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:20:19
   |
20 |     #[cfg(not(any(armv7m, armv8m, native)))]
   |                   ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv7m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv7m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:20:27
   |
20 |     #[cfg(not(any(armv7m, armv8m, native)))]
   |                           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:20:35
   |
20 |     #[cfg(not(any(armv7m, armv8m, native)))]
   |                                   ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/icb.rs:30:11
   |
30 |     #[cfg(armv8m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/itm.rs:56:15
   |
56 |     #[cfg(not(armv8m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/itm.rs:63:11
   |
63 |     #[cfg(armv8m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mpu.rs:6:11
  |
6 | #[cfg(not(armv8m))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mpu.rs:34:7
   |
34 | #[cfg(armv8m)]
   |       ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:4:11
  |
4 | #[cfg(not(armv6m))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:34:15
   |
34 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:36:11
   |
36 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:52:15
   |
52 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:66:11
   |
66 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=serde_core CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Serde traits only, with no support for derive -- use the `serde` crate instead' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde_core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.228 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=228 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/serde_core-066360e9fdac59a5/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name serde_core --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.228/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="result"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "rc", "result", "std", "unstable"))' -C metadata=10ac90af537ede52 -C extra-filename=-734fa738f257c8c7 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort --check-cfg 'cfg(if_docsrs_then_no_serde_core)' --check-cfg 'cfg(no_core_cstr)' --check-cfg 'cfg(no_core_error)' --check-cfg 'cfg(no_core_net)' --check-cfg 'cfg(no_core_num_saturating)' --check-cfg 'cfg(no_diagnostic_namespace)' --check-cfg 'cfg(no_serde_derive)' --check-cfg 'cfg(no_std_atomic)' --check-cfg 'cfg(no_std_atomic64)' --check-cfg 'cfg(no_target_has_atomic)'`
warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:69:15
   |
69 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:73:15
   |
73 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:87:15
   |
87 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:151:15
    |
151 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:248:11
    |
248 |     #[cfg(armv6m)]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:257:11
    |
257 |     #[cfg(armv6m)]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:134:19
    |
134 |         #[cfg(not(armv6m))]
    |                   ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:141:15
    |
141 |         #[cfg(armv6m)]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:219:19
    |
219 |         #[cfg(not(armv6m))]
    |                   ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/nvic.rs:225:15
    |
225 |         #[cfg(armv6m)]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:7:11
  |
7 | #[cfg(not(armv6m))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:9:11
  |
9 | #[cfg(not(armv6m))]
  |           ^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:11:11
   |
11 | #[cfg(not(armv6m))]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:101:7
    |
101 | #[cfg(has_fpu)]
    |       ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:112:7
    |
112 | #[cfg(has_fpu)]
    |       ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:119:7
    |
119 | #[cfg(has_fpu)]
    |       ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:122:7
    |
122 | #[cfg(has_fpu)]
    |       ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:309:11
    |
309 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:315:11
    |
315 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:318:11
    |
318 | #[cfg(not(armv6m))]
    |           ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:209:15
    |
209 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:213:15
    |
213 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:217:15
    |
217 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:221:15
    |
221 |     #[cfg(any(armv8m, native))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:221:23
    |
221 |     #[cfg(any(armv8m, native))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:228:15
    |
228 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:925:15
    |
925 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:929:15
    |
929 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:933:15
    |
933 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:937:15
    |
937 |     #[cfg(any(armv8m, native))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:937:23
    |
937 |     #[cfg(any(armv8m, native))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:944:15
    |
944 |     #[cfg(not(armv6m))]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:40:15
   |
40 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:42:11
   |
42 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:49:11
   |
49 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:56:15
   |
56 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:58:11
   |
58 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:62:15
   |
62 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:64:11
   |
64 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:68:15
   |
68 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:70:11
   |
70 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:74:15
   |
74 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:76:11
   |
76 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:80:15
   |
80 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:82:11
   |
82 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:86:15
   |
86 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:88:11
   |
88 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:94:15
   |
94 |     #[cfg(not(armv6m))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:96:11
   |
96 |     #[cfg(armv6m)]
   |           ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:179:23
    |
179 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:181:23
    |
181 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:183:23
    |
183 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:185:23
    |
185 |             #[cfg(any(armv8m, native))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:185:31
    |
185 |             #[cfg(any(armv8m, native))]
    |                               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:188:23
    |
188 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:247:23
    |
247 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:249:23
    |
249 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:251:23
    |
251 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:253:23
    |
253 |             #[cfg(any(armv8m, native))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:253:31
    |
253 |             #[cfg(any(armv8m, native))]
    |                               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:256:23
    |
256 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:290:23
    |
290 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:292:23
    |
292 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:294:23
    |
294 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:296:23
    |
296 |             #[cfg(any(armv8m, native))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `native`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:296:31
    |
296 |             #[cfg(any(armv8m, native))]
    |                               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(native)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(native)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:299:23
    |
299 |             #[cfg(not(armv6m))]
    |                       ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1037:19
     |
1037 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                   ^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1037:27
     |
1037 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                           ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1061:19
     |
1061 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                   ^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1061:27
     |
1061 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                           ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1082:19
     |
1082 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                   ^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1082:27
     |
1082 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                           ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1101:19
     |
1101 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                   ^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1101:27
     |
1101 |     #[cfg(not(any(armv6m, armv8m_base)))]
     |                           ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:963:19
    |
963 |         #[cfg(not(armv6m))]
    |                   ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:974:15
    |
974 |         #[cfg(armv6m)]
    |               ^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1008:19
     |
1008 |         #[cfg(not(armv6m))]
     |                   ^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1017:15
     |
1017 |         #[cfg(armv6m)]
     |               ^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_main`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/scb.rs:1043:19
     |
1043 |             #[cfg(armv8m_main)]
     |                   ^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_main)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_main)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `cm7`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:99:11
   |
99 |     #[cfg(cm7)]
   |           ^^^ help: found config with similar value: `feature = "cm7"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(cm7)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(cm7)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `cm7`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/peripheral/mod.rs:183:19
    |
183 |             #[cfg(cm7)]
    |                   ^^^ help: found config with similar value: `feature = "cm7"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(cm7)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(cm7)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:33:15
   |
33 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:33:28
   |
33 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |                            ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:36:15
   |
36 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:36:28
   |
36 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |                            ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv6m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:41:15
   |
41 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |               ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv6m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv6m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_base`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:41:28
   |
41 | #[cfg(all(not(armv6m), not(armv8m_base)))]
   |                            ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_base)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_base)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `has_fpu`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:44:7
   |
44 | #[cfg(has_fpu)]
   |       ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_fpu)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(has_fpu)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_main`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:53:7
   |
53 | #[cfg(armv8m_main)]
   |       ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_main)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_main)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m_main`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/mod.rs:56:7
   |
56 | #[cfg(armv8m_main)]
   |       ^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m_main)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m_main)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/msp.rs:19:7
   |
19 | #[cfg(armv8m)]
   |       ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `armv8m`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-0.7.7/src/register/msp.rs:28:7
   |
28 | #[cfg(armv8m)]
   |       ^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(armv8m)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(armv8m)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `heapless` (lib) generated 7 warnings
   Compiling litrs v1.0.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=litrs CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litrs-1.0.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litrs-1.0.0/Cargo.toml CARGO_PKG_AUTHORS='Lukas Kalbertodt <lukas.kalbertodt@gmail.com>' CARGO_PKG_DESCRIPTION='Parse and inspect Rust literals (i.e. tokens in the Rust programming language
representing fixed values). Particularly useful for proc macros, but can also
be used outside of a proc-macro context.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=litrs CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/LukasKalbertodt/litrs' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name litrs --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litrs-1.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("check_suffix", "proc-macro2", "unicode-xid"))' -C metadata=c42443e2869e4485 -C extra-filename=-de7fdad8b44ad9a7 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling usb-device v0.3.2
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=usb_device CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usb-device-0.3.2 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usb-device-0.3.2/Cargo.toml CARGO_PKG_AUTHORS='Matti Virkkunen <mvirkkunen@gmail.com>' CARGO_PKG_DESCRIPTION='USB stack for embedded devices.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=usb-device CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded-community/usb-device' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name usb_device --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usb-device-0.3.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("control-buffer-256", "defmt", "log", "test-class-high-speed"))' -C metadata=f7def4a0494d6a7f -C extra-filename=-a5016ad06c2f4828 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern heapless=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libheapless-75b9612e6192ae87.rmeta --extern portable_atomic=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libportable_atomic-8957a256d69dad9b.rmeta --cap-lints warn -C panic=abort`
   Compiling bare-metal v1.0.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=bare_metal CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-1.0.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-1.0.0/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Abstractions common to bare metal systems' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bare-metal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/bare-metal' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name bare_metal --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bare-metal-1.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=72c1753d8fba3c89 -C extra-filename=-744b5771366fe873 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling embedded-hal v1.0.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=embedded_hal CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/Cargo.toml CARGO_PKG_AUTHORS='The Embedded HAL Team <embedded-hal@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>:Jonathan '\''theJPster'\'' Pallant <github@thejpster.org.uk>' CARGO_PKG_DESCRIPTION=' A Hardware Abstraction Layer (HAL) for embedded systems ' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=embedded-hal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/embedded-hal' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name embedded_hal --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-1.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("defmt-03"))' -C metadata=66ce8500136b29a6 -C extra-filename=-fcea9396f00c896f --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
[stm32f4-staging 0.16.1] cargo:rustc-link-search=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-staging-83aed20f91313826/out
[stm32f4-staging 0.16.1] cargo:rerun-if-changed=src/stm32f411/device.x
[stm32f4-staging 0.16.1] cargo:rerun-if-changed=build.rs
   Compiling rtic v2.2.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0/Cargo.toml CARGO_PKG_AUTHORS='The Real-Time Interrupt-driven Concurrency developers:Emil Fresk <emil.fresk@gmail.com>:Henrik Tjäder <henrik@tjaders.com>:Jorge Aparicio <jorge@japaric.io>:Per Lindgren <per.lindgren@ltu.se>' CARGO_PKG_DESCRIPTION='Real-Time Interrupt-driven Concurrency (RTIC): a concurrency framework for building real-time systems' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rtic CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rtic-rs/rtic' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=2.2.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2024 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="cortex-m"' --cfg 'feature="default"' --cfg 'feature="thumbv7-backend"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("cortex-m", "default", "esp32c3", "esp32c6", "riscv", "riscv-clint-backend", "riscv-esp32c3-backend", "riscv-esp32c6-backend", "riscv-mecall-backend", "riscv-slic", "test-critical-section", "thumbv6-backend", "thumbv7-backend", "thumbv8base-backend", "thumbv8main-backend"))' -C metadata=7d74967accb4e54a -C extra-filename=-0d9a89b026702012 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/rtic-0d9a89b026702012 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
warning: `cortex-m` (lib) generated 203 warnings
   Compiling crc32fast v1.5.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml CARGO_PKG_AUTHORS='Sam Rijs <srijs@airpost.net>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='Fast, SIMD-accelerated CRC32 (IEEE) checksum computation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crc32fast CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/srijs/rust-crc32fast' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.5.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=5 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "nightly", "std"))' -C metadata=bcdf781f7abebb9f -C extra-filename=-e7570474bcc62227 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/crc32fast-e7570474bcc62227 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling num-conv v0.1.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=num_conv CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-conv-0.1.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-conv-0.1.0/Cargo.toml CARGO_PKG_AUTHORS='Jacob Pratt <jacob@jhpratt.dev>' CARGO_PKG_DESCRIPTION='`num_conv` is a crate to convert between integer types without using `as` casts. This provides
better certainty when refactoring, makes the exact behavior of code more explicit, and allows using
turbofish syntax.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=num-conv CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/jhpratt/num-conv' CARGO_PKG_RUST_VERSION=1.57.0 CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name num_conv --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-conv-0.1.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --warn=unused --warn=unreachable-pub '--deny=clippy::std-instead-of-core' --warn=missing-docs '--deny=clippy::alloc-instead-of-core' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=063a8933d0ced079 -C extra-filename=-e86f40d3ae2faaea --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling time-core v0.1.6
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=time_core CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-core-0.1.6 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-core-0.1.6/Cargo.toml CARGO_PKG_AUTHORS='Jacob Pratt <open-source@jhpratt.dev>:Time contributors' CARGO_PKG_DESCRIPTION='This crate is an implementation detail and should not be relied upon directly.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=time-core CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/time-rs/time' CARGO_PKG_RUST_VERSION=1.81.0 CARGO_PKG_VERSION=0.1.6 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=6 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name time_core --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-core-0.1.6/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --warn=unused '--warn=clippy::nursery' '--warn=clippy::all' --warn=variant-size-differences '--warn=clippy::use-debug' '--warn=clippy::unwrap-used' '--warn=clippy::unwrap-in-result' --warn=unused-qualifications --warn=unused-lifetimes --warn=unused-import-braces --deny=unstable-syntax-pre-expansion --deny=unsafe-op-in-unsafe-fn --warn=unreachable-pub '--warn=clippy::unnested-or-patterns' --deny=unnameable-test-items '--warn=clippy::uninlined-format-args' '--warn=clippy::unimplemented' --deny=unexpected_cfgs '--warn=rustdoc::unescaped-backticks' '--deny=clippy::undocumented-unsafe-blocks' --deny=unconditional-recursion --warn=trivial-numeric-casts --warn=trivial-casts '--warn=clippy::todo' --deny=suspicious-double-ref-op '--deny=clippy::std-instead-of-core' --warn=single-use-lifetimes '--warn=clippy::semicolon-outside-block' '--warn=rustdoc::private-doc-tests' '--warn=clippy::print-stdout' --deny=overlapping-range-endpoints --deny=opaque-hidden-inferred-bound '--warn=clippy::obfuscated-if-else' --warn=noop-method-call --deny=non-ascii-idents --deny=named-arguments-used-positionally '--warn=clippy::missing-enforced-import-renames' '--warn=clippy::missing-docs-in-private-items' --warn=missing-docs --warn=missing-debug-implementations --warn=missing-copy-implementations --warn=missing-abi --warn=meta-variable-misuse '--warn=clippy::manual-let-else' --warn=macro-use-extern-crate --warn=let-underscore --warn=keyword-idents --deny=invalid-value --deny=invalid-reference-casting --deny=invalid-nan-comparisons --deny=invalid-macro-export-arguments --deny=invalid-from-utf8 --deny=improper-ctypes-definitions --deny=improper-ctypes --deny=hidden-glob-reexports '--warn=clippy::get-unwrap' --deny=future-incompatible '--warn=clippy::explicit-auto-deref' --deny=drop-bounds --deny=deref-nullptr '--warn=clippy::decimal-literal-representation' '--warn=clippy::dbg-macro' --deny=dangling-pointers-from-temporaries --deny=const-item-mutation --deny=clashing-extern-declarations '--warn=clippy::as-underscore' --deny=ambiguous-glob-reexports '--deny=clippy::alloc-instead-of-core' --allow=unstable-name-collisions '--allow=clippy::uninhabited-references' '--allow=clippy::redundant-pub-crate' '--allow=clippy::option-if-let-else' '--allow=clippy::incompatible-msrv' --check-cfg 'cfg(__ui_tests)' --check-cfg 'cfg(bench)' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=c70f82c9f6688ad6 -C extra-filename=-c37e27e4c4bfba61 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
[serde 1.0.228] cargo:rerun-if-changed=build.rs
[serde 1.0.228] cargo:rustc-cfg=if_docsrs_then_no_serde_core
[serde 1.0.228] cargo:rustc-check-cfg=cfg(feature, values("result"))
[serde 1.0.228] cargo:rustc-check-cfg=cfg(if_docsrs_then_no_serde_core)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_core_cstr)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_core_error)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_core_net)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_core_num_saturating)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_diagnostic_namespace)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_serde_derive)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_std_atomic)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_std_atomic64)
[serde 1.0.228] cargo:rustc-check-cfg=cfg(no_target_has_atomic)
   Compiling crc-catalog v2.4.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=crc_catalog CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-catalog-2.4.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-catalog-2.4.0/Cargo.toml CARGO_PKG_AUTHORS='Akhil Velagapudi <akhilvelagapudi@gmail.com>' CARGO_PKG_DESCRIPTION='Catalog of CRC algorithms (generated from http://reveng.sourceforge.net/crc-catalogue) expressed as simple Rust structs.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crc-catalog CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/akhilles/crc-catalog.git' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=2.4.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name crc_catalog --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-catalog-2.4.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=13f8fdf5417f35c3 -C extra-filename=-f310e76ad24c2edc --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling embedded-io v0.6.1
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=embedded_io CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-io-0.6.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-io-0.6.1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Embedded IO traits' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=embedded-io CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/embedded-hal' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.6.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=6 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name embedded_io --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-io-0.6.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "defmt-03", "std"))' -C metadata=e10aa4951ef96f81 -C extra-filename=-eca0725bde9afed3 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling stm32f4xx-hal v0.22.1
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1/Cargo.toml CARGO_PKG_AUTHORS='Daniel Egger <daniel@eggers-club.de>' CARGO_PKG_DESCRIPTION='Peripheral access API for STM32F4 series microcontrollers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=0BSD CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4xx-hal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32f4xx-hal' CARGO_PKG_RUST_VERSION=1.62 CARGO_PKG_VERSION=0.22.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=22 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="gpio-f411"' --cfg 'feature="gpiod"' --cfg 'feature="gpioe"' --cfg 'feature="i2c3"' --cfg 'feature="otg-fs"' --cfg 'feature="sdio"' --cfg 'feature="spi3"' --cfg 'feature="spi4"' --cfg 'feature="spi5"' --cfg 'feature="stm32f411"' --cfg 'feature="tim1"' --cfg 'feature="tim10"' --cfg 'feature="tim11"' --cfg 'feature="tim2"' --cfg 'feature="tim3"' --cfg 'feature="tim4"' --cfg 'feature="tim5"' --cfg 'feature="tim9"' --cfg 'feature="usb_fs"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("adc2", "adc3", "aes", "can", "can1", "can2", "can3", "cortex-m-rtic", "cryp", "dac", "dcmi", "defmt", "dfsdm", "dfsdm1", "dfsdm2", "dma2d", "dsihost", "embedded-display-controller", "eth", "fmc", "fmpi2c1", "fsmc", "fsmc_lcd", "gpio-f401", "gpio-f410", "gpio-f411", "gpio-f412", "gpio-f413", "gpio-f417", "gpio-f427", "gpio-f446", "gpio-f469", "gpiod", "gpioe", "gpiof", "gpiog", "gpioi", "gpioj", "gpiok", "i2c3", "i2s", "lptim1", "ltdc", "otg-fs", "otg-hs", "quadspi", "rcc_i2s_apb", "rcc_shared_m", "rng", "rtic-tim2", "rtic-tim3", "rtic-tim4", "rtic-tim5", "rtic1", "rtic2", "sai", "sai1", "sai2", "sdio", "sdio-host", "spdifrx", "spi3", "spi4", "spi5", "spi6", "stm32-fmc", "stm32f401", "stm32f405", "stm32f407", "stm32f410", "stm32f411", "stm32f412", "stm32f413", "stm32f415", "stm32f417", "stm32f423", "stm32f427", "stm32f429", "stm32f437", "stm32f439", "stm32f446", "stm32f469", "stm32f479", "tim1", "tim10", "tim11", "tim12", "tim13", "tim14", "tim2", "tim3", "tim4", "tim5", "tim6", "tim7", "tim8", "tim9", "uart10", "uart4", "uart5", "uart7", "uart8", "uart9", "usart3", "usb_fs", "usb_hs"))' -C metadata=2b1264d4ba5321d5 -C extra-filename=-93f6fe798f8b8161 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/stm32f4xx-hal-93f6fe798f8b8161 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
   Compiling stm32f4 v0.16.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0/Cargo.toml CARGO_PKG_AUTHORS='Adam Greig <adam@adamgreig.com>:stm32-rs Contributors' CARGO_PKG_DESCRIPTION='Device support crates for STM32F4 devices' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32-rs' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.16.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=16 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name build_script_build --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="cortex-m-rt"' --cfg 'feature="critical-section"' --cfg 'feature="default"' --cfg 'feature="rt"' --cfg 'feature="stm32f411"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("atomics", "cortex-m-rt", "critical-section", "default", "defmt", "rt", "stm32f401", "stm32f405", "stm32f407", "stm32f410", "stm32f411", "stm32f412", "stm32f413", "stm32f427", "stm32f429", "stm32f446", "stm32f469"))' -C metadata=5bae1bc3363e0e5d -C extra-filename=-0dcb114ebf03f783 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/stm32f4-0dcb114ebf03f783 -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=cortex-m,default,thumbv7-backend CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_CORTEX_M=1 CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_THUMBV7_BACKEND=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0/Cargo.toml CARGO_PKG_AUTHORS='The Real-Time Interrupt-driven Concurrency developers:Emil Fresk <emil.fresk@gmail.com>:Henrik Tjäder <henrik@tjaders.com>:Jorge Aparicio <jorge@japaric.io>:Per Lindgren <per.lindgren@ltu.se>' CARGO_PKG_DESCRIPTION='Real-Time Interrupt-driven Concurrency (RTIC): a concurrency framework for building real-time systems' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rtic CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rtic-rs/rtic' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=2.2.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/rtic-fd993a2141a018fe/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/rtic-0d9a89b026702012/build-script-build`
   Compiling crc v3.3.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=crc CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-3.3.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-3.3.0/Cargo.toml CARGO_PKG_AUTHORS='Rui Hu <code@mrhooray.com>:Akhil Velagapudi <4@4khil.com>' CARGO_PKG_DESCRIPTION='Rust implementation of CRC with support of various standards' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crc CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/mrhooray/crc-rs.git' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=3.3.0 CARGO_PKG_VERSION_MAJOR=3 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name crc --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc-3.3.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=3b0131b9679e209e -C extra-filename=-0b121a1a17304b1d --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern crc_catalog=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcrc_catalog-f310e76ad24c2edc.rmeta --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE='' CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml CARGO_PKG_AUTHORS='Sam Rijs <srijs@airpost.net>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='Fast, SIMD-accelerated CRC32 (IEEE) checksum computation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crc32fast CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/srijs/rust-crc32fast' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.5.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=5 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/crc32fast-85d23a757974b812/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/crc32fast-e7570474bcc62227/build-script-build`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=synopsys_usb_otg CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/Cargo.toml CARGO_PKG_AUTHORS='Vadim Kaushan <admin@disasm.info>' CARGO_PKG_DESCRIPTION=''\''usb-device'\'' implementation for Synopsys USB OTG IP cores' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=synopsys-usb-otg CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/synopsys-usb-otg' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/synopsys-usb-otg-86c729426f1c43ab/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name synopsys_usb_otg --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="cortex-m"' --cfg 'feature="fs"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("cortex-m", "fs", "hs", "riscv", "xcvrdly"))' -C metadata=f38464263c765104 -C extra-filename=-543656d204296904 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m-e574693899d41b52.rmeta --extern embedded_hal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_hal-3a0c5afa89b9df0e.rmeta --extern usb_device=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libusb_device-a5016ad06c2f4828.rmeta --extern vcell=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libvcell-929dacc6f0d21b3a.rmeta --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out`
warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_device_f401_f405_f407_f411_f427_f429.rs:7:11
  |
7 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_device_f401_f405_f407_f411_f427_f429.rs:22:15
   |
22 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_device_f401_f405_f407_f411_f427_f429.rs:25:15
   |
25 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_global_f401_f405_f407_f411_f427_f429.rs:7:11
  |
7 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_global_f401_f405_f407_f411_f427_f429.rs:19:15
   |
19 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_global_f401_f405_f407_f411_f427_f429.rs:22:15
   |
22 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_host.rs:7:11
  |
7 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_host.rs:21:15
   |
21 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_fs_host.rs:24:15
   |
24 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_device.rs:7:11
  |
7 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_device.rs:24:15
   |
24 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_device.rs:27:15
   |
27 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_global.rs:7:11
  |
7 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_global.rs:20:15
   |
20 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_global.rs:23:15
   |
23 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_host.rs:7:11
  |
7 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_host.rs:25:15
   |
25 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_hs_host.rs:28:15
   |
28 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_s_pwrclk.rs:7:11
  |
7 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_s_pwrclk.rs:16:15
   |
16 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_s_pwrclk.rs:19:15
   |
19 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_s_pwrclk.rs:46:15
   |
46 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/instances/otg_s_pwrclk.rs:49:15
   |
49 |     #[cfg(not(feature = "nosync"))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_device_v1.rs:8:11
  |
8 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_device_v1.rs:1936:11
     |
1936 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_device_v1.rs:1941:11
     |
1941 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rtfm`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_device_v1.rs:1949:7
     |
1949 | #[cfg(feature = "rtfm")]
     |       ^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `rtfm` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_global_v1.rs:8:11
  |
8 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_global_v1.rs:1760:11
     |
1760 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_global_v1.rs:1765:11
     |
1765 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rtfm`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_global_v1.rs:1773:7
     |
1773 | #[cfg(feature = "rtfm")]
     |       ^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `rtfm` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_host.rs:8:11
  |
8 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_host.rs:1356:11
     |
1356 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_host.rs:1361:11
     |
1361 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rtfm`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_host.rs:1369:7
     |
1369 | #[cfg(feature = "rtfm")]
     |       ^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `rtfm` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_pwrclk.rs:8:11
  |
8 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_pwrclk.rs:64:11
   |
64 | #[cfg(not(feature = "nosync"))]
   |           ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_pwrclk.rs:69:11
   |
69 | #[cfg(not(feature = "nosync"))]
   |           ^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `nosync` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rtfm`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_fs_pwrclk.rs:77:7
   |
77 | #[cfg(feature = "rtfm")]
   |       ^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
   = help: consider adding `rtfm` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_device.rs:8:11
  |
8 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_device.rs:2758:11
     |
2758 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_device.rs:2763:11
     |
2763 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rtfm`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_device.rs:2771:7
     |
2771 | #[cfg(feature = "rtfm")]
     |       ^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `rtfm` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_global.rs:8:11
  |
8 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_global.rs:2032:11
     |
2032 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_global.rs:2037:11
     |
2037 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rtfm`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_global.rs:2045:7
     |
2045 | #[cfg(feature = "rtfm")]
     |       ^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `rtfm` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_host.rs:8:11
  |
8 | #[cfg(not(feature = "nosync"))]
  |           ^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
  = help: consider adding `nosync` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_host.rs:2021:11
     |
2021 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `nosync`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_host.rs:2026:11
     |
2026 | #[cfg(not(feature = "nosync"))]
     |           ^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `nosync` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `rtfm`
    --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/peripherals/otg_hs_host.rs:2034:7
     |
2034 | #[cfg(feature = "rtfm")]
     |       ^^^^^^^^^^^^^^^^
     |
     = note: expected values for `feature` are: `cortex-m`, `fs`, `hs`, `riscv`, and `xcvrdly`
     = help: consider adding `rtfm` as a feature in `Cargo.toml`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `super::instances::otg_fs_host`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/stm32f429/mod.rs:3:9
  |
3 | pub use super::instances::otg_fs_host;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `super::instances::otg_hs_device`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/stm32f429/mod.rs:4:9
  |
4 | pub use super::instances::otg_hs_device;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::instances::otg_hs_global`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/stm32f429/mod.rs:5:9
  |
5 | pub use super::instances::otg_hs_global;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::instances::otg_hs_host`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/stm32f429/mod.rs:6:9
  |
6 | pub use super::instances::otg_hs_host;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::stm32f429::otg_fs_global::OTG_FS_GLOBAL as OTG_GLOBAL`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/mod.rs:12:13
   |
12 |     pub use super::stm32f429::otg_fs_global::OTG_FS_GLOBAL as OTG_GLOBAL;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::stm32f429::otg_fs_device::OTG_FS_DEVICE as OTG_DEVICE`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/mod.rs:23:13
   |
23 |     pub use super::stm32f429::otg_fs_device::OTG_FS_DEVICE as OTG_DEVICE;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::stm32f429::otg_s_pwrclk::OTG_FS_PWRCLK as OTG_PWRCLK`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/mod.rs:34:13
   |
34 |     pub use super::stm32f429::otg_s_pwrclk::OTG_FS_PWRCLK as OTG_PWRCLK;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `DOEPINT0`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/mod.rs:82:57
   |
82 |     pub use super::stm32f429::otg_fs_device::{DOEPCTL0, DOEPINT0, DOEPTSIZ0};
   |                                                         ^^^^^^^^

warning: unused imports: `DOEPINT1 as DOEPINT` and `DOEPTSIZ1 as DOEPTSIZ`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/mod.rs:102:30
    |
102 |         DOEPCTL1 as DOEPCTL, DOEPINT1 as DOEPINT, DOEPTSIZ1 as DOEPTSIZ,
    |                              ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

   Compiling embedded-hal-nb v1.0.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=embedded_hal_nb CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-nb-1.0.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-nb-1.0.0/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Non-blocking Hardware Abstraction Layer (HAL) for embedded systems using the `nb` crate.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=embedded-hal-nb CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/embedded-hal' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name embedded_hal_nb --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-hal-nb-1.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=3e76f06a05d98978 -C extra-filename=-d54fd3cb4171b0ce --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern embedded_hal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_hal-fcea9396f00c896f.rmeta --extern nb=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libnb-7627bedbeb0eefc1.rmeta --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=gpio-f411,gpiod,gpioe,i2c3,otg-fs,sdio,spi3,spi4,spi5,stm32f411,tim1,tim10,tim11,tim2,tim3,tim4,tim5,tim9,usb_fs CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_GPIOD=1 CARGO_FEATURE_GPIOE=1 CARGO_FEATURE_GPIO_F411=1 CARGO_FEATURE_I2C3=1 CARGO_FEATURE_OTG_FS=1 CARGO_FEATURE_SDIO=1 CARGO_FEATURE_SPI3=1 CARGO_FEATURE_SPI4=1 CARGO_FEATURE_SPI5=1 CARGO_FEATURE_STM32F411=1 CARGO_FEATURE_TIM1=1 CARGO_FEATURE_TIM10=1 CARGO_FEATURE_TIM11=1 CARGO_FEATURE_TIM2=1 CARGO_FEATURE_TIM3=1 CARGO_FEATURE_TIM4=1 CARGO_FEATURE_TIM5=1 CARGO_FEATURE_TIM9=1 CARGO_FEATURE_USB_FS=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1/Cargo.toml CARGO_PKG_AUTHORS='Daniel Egger <daniel@eggers-club.de>' CARGO_PKG_DESCRIPTION='Peripheral access API for STM32F4 series microcontrollers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=0BSD CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4xx-hal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32f4xx-hal' CARGO_PKG_RUST_VERSION=1.62 CARGO_PKG_VERSION=0.22.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=22 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4xx-hal-bac68bd202fac0f1/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/stm32f4xx-hal-93f6fe798f8b8161/build-script-build`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CFG_FEATURE=cortex-m-rt,critical-section,default,rt,stm32f411 CARGO_CFG_PANIC=abort CARGO_CFG_TARGET_ABI=eabihf CARGO_CFG_TARGET_ARCH=arm CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV='' CARGO_CFG_TARGET_HAS_ATOMIC=16,32,8,ptr CARGO_CFG_TARGET_OS=none CARGO_CFG_TARGET_POINTER_WIDTH=32 CARGO_CFG_TARGET_VENDOR=unknown CARGO_ENCODED_RUSTFLAGS='-Cpanic=abort' CARGO_FEATURE_CORTEX_M_RT=1 CARGO_FEATURE_CRITICAL_SECTION=1 CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_RT=1 CARGO_FEATURE_STM32F411=1 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0/Cargo.toml CARGO_PKG_AUTHORS='Adam Greig <adam@adamgreig.com>:stm32-rs Contributors' CARGO_PKG_DESCRIPTION='Device support crates for STM32F4 devices' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32-rs' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.16.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=16 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=true DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/aarch64-apple-darwin/lib:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' HOST=aarch64-apple-darwin NUM_JOBS=10 OPT_LEVEL=s OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-9bd5402a5ad5de08/out PROFILE=release RUSTC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc RUSTDOC=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustdoc TARGET=thumbv7em-none-eabihf /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/build/stm32f4-0dcb114ebf03f783/build-script-build`
   Compiling document-features v0.2.12
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=document_features CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/document-features-0.2.12 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/document-features-0.2.12/Cargo.toml CARGO_PKG_AUTHORS='Slint Developers <info@slint.dev>' CARGO_PKG_DESCRIPTION='Extract documentation for the feature flags from comments in Cargo.toml' CARGO_PKG_HOMEPAGE='https://slint.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=document-features CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/slint-ui/document-features' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=0.2.12 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=12 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name document_features --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/document-features-0.2.12/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="default"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "self-test"))' -C metadata=28ea31a92517b89b -C extra-filename=-6c3a7a4d34044ed8 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern litrs=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/liblitrs-de7fdad8b44ad9a7.rlib --extern proc_macro --cap-lints warn`
   Compiling fugit-timer v0.1.3
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=fugit_timer CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fugit-timer-0.1.3 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fugit-timer-0.1.3/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A Count Down Timer abstaction that uses fugit time primitives' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=fugit-timer CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/burrbull/fugit-timer' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.3 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name fugit_timer --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fugit-timer-0.1.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=00de0b13e1e23e4f -C extra-filename=-b3563fbb706f0612 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern fugit=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libfugit-a866a225a0e342c0.rmeta --extern nb=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libnb-7627bedbeb0eefc1.rmeta --cap-lints warn -C panic=abort`
   Compiling embedded-dma v0.2.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=embedded_dma CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-dma-0.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-dma-0.2.0/Cargo.toml CARGO_PKG_AUTHORS='Jan Teske <jteske@posteo.net>:Thales Fragoso <thales.fragosoz@gmail.com>' CARGO_PKG_DESCRIPTION='Traits to aid in the creation of sound DMA abstractions' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=embedded-dma CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/embedded-dma' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name embedded_dma --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-dma-0.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=308e947a82fb23be -C extra-filename=-cbfd5dfbd6702ff0 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern stable_deref_trait=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libstable_deref_trait-e9d3f6de904abbeb.rmeta --cap-lints warn -C panic=abort`
warning: field `DOEPINT0` is never read
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/mod.rs:90:13
   |
87 |     pub struct RegisterBlock {
   |                ------------- field in this struct
...
90 |         pub DOEPINT0: RWRegister<u32>,
   |             ^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `DOEPTSIZ` is never read
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/ral/mod.rs:115:13
    |
110 |     pub struct RegisterBlock {
    |                ------------- field in this struct
...
115 |         pub DOEPTSIZ: RWRegister<u32>,
    |             ^^^^^^^^

warning: field `interval` is never read
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/transition.rs:15:9
   |
4  | pub struct EndpointDescriptor {
   |            ------------------ field in this struct
...
15 |     pub interval: u8,
   |         ^^^^^^^^

warning: field `pair_of` is never read
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synopsys-usb-otg-0.4.0/src/transition.rs:40:9
   |
19 | pub struct EndpointConfig {
   |            -------------- field in this struct
...
40 |     pub pair_of: Option<EndpointAddress>,
   |         ^^^^^^^

   Compiling rtic-core v1.0.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=rtic_core CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-core-1.0.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-core-1.0.0/Cargo.toml CARGO_PKG_AUTHORS='The Real-Time Interrupt-driven Concurrency developers:Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Core abstractions of the Real-Time Interrupt-driven Concurrency framework' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rtic-core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rtic-rs/rtic-core' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name rtic_core --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-core-1.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=f4e7b391189cf428 -C extra-filename=-09254c6a78559bfb --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
warning: `synopsys-usb-otg` (lib) generated 64 warnings
   Compiling rand_core v0.6.4
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=rand_core CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/Cargo.toml CARGO_PKG_AUTHORS='The Rand Project Developers:The Rust Project Developers' CARGO_PKG_DESCRIPTION='Core random number generator traits and tools for implementation.
' CARGO_PKG_HOMEPAGE='https://rust-random.github.io/book' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rand_core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-random/rand' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.6.4 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=6 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name rand_core --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "getrandom", "serde", "serde1", "std"))' -C metadata=1a879c81c8116367 -C extra-filename=-80bac2ea3cca7ebf --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
warning: unexpected `cfg` condition name: `doc_cfg`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs:38:13
   |
38 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
   |             ^^^^^^^
   |
   = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: `rand_core` (lib) generated 1 warning
   Compiling linked_list_allocator v0.10.5
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=linked_list_allocator CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked_list_allocator-0.10.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked_list_allocator-0.10.5/Cargo.toml CARGO_PKG_AUTHORS='Philipp Oppermann <dev@phil-opp.com>' CARGO_PKG_DESCRIPTION='Simple allocator usable for no_std systems. It builds a linked list from the freed blocks and thus needs no additional data structures.' CARGO_PKG_HOMEPAGE='http://os.phil-opp.com/kernel-heap.html#a-better-allocator' CARGO_PKG_LICENSE=Apache-2.0/MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=linked_list_allocator CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/phil-opp/linked-list-allocator' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.10.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name linked_list_allocator --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked_list_allocator-0.10.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="const_mut_refs"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc_ref", "const_mut_refs", "default", "spinning_top", "use_spin", "use_spin_nightly"))' -C metadata=23113a84923b32a9 -C extra-filename=-67535f3c8a61093d --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
warning: unexpected `cfg` condition name: `fuzzing`
 --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked_list_allocator-0.10.5/src/lib.rs:7:17
  |
7 | #[cfg(any(test, fuzzing))]
  |                 ^^^^^^^
  |
  = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fuzzing)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `fuzzing`
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked_list_allocator-0.10.5/src/lib.rs:39:7
   |
39 | #[cfg(fuzzing)]
   |       ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fuzzing)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fuzzing`
   --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linked_list_allocator-0.10.5/src/hole.rs:284:21
    |
284 |     #[cfg(any(test, fuzzing))]
    |                     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fuzzing)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

   Compiling time v0.3.44
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=time CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-0.3.44 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-0.3.44/Cargo.toml CARGO_PKG_AUTHORS='Jacob Pratt <open-source@jhpratt.dev>:Time contributors' CARGO_PKG_DESCRIPTION='Date and time library. Fully interoperable with the standard library. Mostly compatible with #'\!'[no_std].' CARGO_PKG_HOMEPAGE='https://time-rs.github.io' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=time CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/time-rs/time' CARGO_PKG_RUST_VERSION=1.81.0 CARGO_PKG_VERSION=0.3.44 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=44 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name time --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/time-0.3.44/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --warn=unused '--warn=clippy::nursery' '--warn=clippy::all' --warn=variant-size-differences '--warn=clippy::use-debug' '--warn=clippy::unwrap-used' '--warn=clippy::unwrap-in-result' --warn=unused-qualifications --warn=unused-lifetimes --warn=unused-import-braces --deny=unstable-syntax-pre-expansion --deny=unsafe-op-in-unsafe-fn --warn=unreachable-pub '--warn=clippy::unnested-or-patterns' --deny=unnameable-test-items '--warn=clippy::uninlined-format-args' '--warn=clippy::unimplemented' --deny=unexpected_cfgs '--warn=rustdoc::unescaped-backticks' '--deny=clippy::undocumented-unsafe-blocks' --deny=unconditional-recursion --warn=trivial-numeric-casts --warn=trivial-casts '--warn=clippy::todo' --deny=suspicious-double-ref-op '--deny=clippy::std-instead-of-core' --warn=single-use-lifetimes '--warn=clippy::semicolon-outside-block' '--warn=rustdoc::private-doc-tests' '--warn=clippy::print-stdout' --deny=overlapping-range-endpoints --deny=opaque-hidden-inferred-bound '--warn=clippy::obfuscated-if-else' --warn=noop-method-call --deny=non-ascii-idents --deny=named-arguments-used-positionally '--warn=clippy::missing-enforced-import-renames' '--warn=clippy::missing-docs-in-private-items' --warn=missing-docs --warn=missing-debug-implementations --warn=missing-copy-implementations --warn=missing-abi --warn=meta-variable-misuse '--warn=clippy::manual-let-else' --warn=macro-use-extern-crate --warn=let-underscore --warn=keyword-idents --deny=invalid-value --deny=invalid-reference-casting --deny=invalid-nan-comparisons --deny=invalid-macro-export-arguments --deny=invalid-from-utf8 --deny=improper-ctypes-definitions --deny=improper-ctypes --deny=hidden-glob-reexports '--warn=clippy::get-unwrap' --deny=future-incompatible '--warn=clippy::explicit-auto-deref' --deny=drop-bounds --deny=deref-nullptr '--warn=clippy::decimal-literal-representation' '--warn=clippy::dbg-macro' --deny=dangling-pointers-from-temporaries --deny=const-item-mutation --deny=clashing-extern-declarations '--warn=clippy::as-underscore' --deny=ambiguous-glob-reexports '--deny=clippy::alloc-instead-of-core' --allow=unstable-name-collisions '--allow=clippy::uninhabited-references' '--allow=clippy::redundant-pub-crate' '--allow=clippy::option-if-let-else' '--allow=clippy::incompatible-msrv' --check-cfg 'cfg(__ui_tests)' --check-cfg 'cfg(bench)' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "formatting", "large-dates", "local-offset", "macros", "parsing", "quickcheck", "rand", "rand08", "rand09", "serde", "serde-human-readable", "serde-well-known", "std", "wasm-bindgen"))' -C metadata=77c86eb4e4fe8906 -C extra-filename=-5382169716598613 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern deranged=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libderanged-bab994001e948864.rmeta --extern num_conv=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libnum_conv-e86f40d3ae2faaea.rmeta --extern powerfmt=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libpowerfmt-65f1a7e43da0fe32.rmeta --extern time_core=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libtime_core-c37e27e4c4bfba61.rmeta --cap-lints warn -C panic=abort`
warning: `linked_list_allocator` (lib) generated 3 warnings
   Compiling embedded-storage v0.3.1
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=embedded_storage CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-storage-0.3.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-storage-0.3.1/Cargo.toml CARGO_PKG_AUTHORS='Mathias Koch <mk@blackbird.online>' CARGO_PKG_DESCRIPTION='A Storage Abstraction Layer for Embedded Systems' CARGO_PKG_HOMEPAGE='https://github.com/rust-embedded-community/embedded-storage' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=embedded-storage CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded-community/embedded-storage' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name embedded_storage --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-storage-0.3.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=f18e0c4fcc3bc57e -C extra-filename=-62a52bd440f0b3bb --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
warning: elided lifetime has a name
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-storage-0.3.1/src/iter.rs:22:75
   |
16 | pub trait IterableByOverlaps<'a, R, I>
   |                              -- lifetime `'a` declared here
...
22 |     fn overlaps(self, memory: &'a [u8], base_address: u32) -> OverlapIterator<R, I>;
   |                                                                              ^ this elided lifetime gets resolved as `'a`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default

warning: elided lifetime has a name
  --> /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/embedded-storage-0.3.1/src/iter.rs:57:75
   |
52 | impl<'a, R, I> IterableByOverlaps<'a, R, I> for I
   |      -- lifetime `'a` declared here
...
57 |     fn overlaps(self, memory: &'a [u8], base_address: u32) -> OverlapIterator<R, I> {
   |                                                                              ^ this elided lifetime gets resolved as `'a`

warning: `embedded-storage` (lib) generated 2 warnings
   Compiling cfg-if v1.0.4
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=cfg_if CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.4 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.4/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A macro to ergonomically define an item depending on a large number of #[cfg]
parameters. Structured like an if-else chain, the first matching branch is the
item that gets emitted.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cfg-if CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/cfg-if' CARGO_PKG_RUST_VERSION=1.32 CARGO_PKG_VERSION=1.0.4 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name cfg_if --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("core", "rustc-dep-of-std"))' -C metadata=3b34c0c1db4c4f42 -C extra-filename=-fb639245e66d4fdb --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
   Compiling alloc-cortex-m v0.4.4
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=alloc_cortex_m CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloc-cortex-m-0.4.4 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloc-cortex-m-0.4.4/Cargo.toml CARGO_PKG_AUTHORS='The Cortex-M Team <cortex-m@teams.rust-embedded.org>:Jonathan Pallant <github@thejpster.org.uk>:Jorge Aparicio <jorge@japaric.io>:Sébastien Béchet <sebastien.bechet@osinix.com>' CARGO_PKG_DESCRIPTION='A heap allocator for Cortex-M processors' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=alloc-cortex-m CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/alloc-cortex-m' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.4 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name alloc_cortex_m --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloc-cortex-m-0.4.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=d2484d794ea95560 -C extra-filename=-bdac2806b28b1139 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m-e574693899d41b52.rmeta --extern linked_list_allocator=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/liblinked_list_allocator-67535f3c8a61093d.rmeta --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out`
   Compiling usbd-serial v0.2.2
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=usbd_serial CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usbd-serial-0.2.2 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usbd-serial-0.2.2/Cargo.toml CARGO_PKG_AUTHORS='Matti Virkkunen <mvirkkunen@gmail.com>' CARGO_PKG_DESCRIPTION='USB CDC-ACM serial port class for use with usb-device.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=usbd-serial CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/mvirkkunen/usbd-serial' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name usbd_serial --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/usbd-serial-0.2.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=89007fe64a6849d5 -C extra-filename=-eddc5d5b41640371 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern embedded_hal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_hal-3a0c5afa89b9df0e.rmeta --extern embedded_io=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_io-eca0725bde9afed3.rmeta --extern nb=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libnb-7627bedbeb0eefc1.rmeta --extern usb_device=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libusb_device-a5016ad06c2f4828.rmeta --cap-lints warn -C panic=abort`
   Compiling panic-halt v0.2.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=panic_halt CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/panic-halt-0.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/panic-halt-0.2.0/Cargo.toml CARGO_PKG_AUTHORS='Emil Fresk <emil.fresk@gmail.com>' CARGO_PKG_DESCRIPTION='Set panicking behavior to halt' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=panic-halt CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/korken89/panic-halt' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name panic_halt --edition=2015 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/panic-halt-0.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=bf54b347526741ab -C extra-filename=-0e5a498c10cc1c59 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --cap-lints warn -C panic=abort`
[rtic 2.2.0] cargo:rustc-cfg=feature="cortex-m-basepri"
[rtic 2.2.0] cargo:rerun-if-changed=build.rs
[crc32fast 1.5.0] cargo:rustc-cfg=stable_arm_crc32_intrinsics
[crc32fast 1.5.0] cargo:rustc-check-cfg=cfg(stable_arm_crc32_intrinsics)
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=crc32fast CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml CARGO_PKG_AUTHORS='Sam Rijs <srijs@airpost.net>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='Fast, SIMD-accelerated CRC32 (IEEE) checksum computation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crc32fast CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/srijs/rust-crc32fast' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.5.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=5 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/crc32fast-85d23a757974b812/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name crc32fast --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "nightly", "std"))' -C metadata=3a99bc060d6bbc2c -C extra-filename=-47555ac40857938e --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern cfg_if=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcfg_if-fb639245e66d4fdb.rmeta --cap-lints warn -C panic=abort --cfg stable_arm_crc32_intrinsics --check-cfg 'cfg(stable_arm_crc32_intrinsics)'`
   Compiling proc-macro-error2 v2.0.1
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=proc_macro_error2 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error2-2.0.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error2-2.0.1/Cargo.toml CARGO_PKG_AUTHORS='CreepySkeleton <creepy-skeleton@yandex.ru>:GnomedDev <david2005thomas@gmail.com>' CARGO_PKG_DESCRIPTION='Almost drop-in replacement to panics in proc-macros' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro-error2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/GnomedDev/proc-macro-error-2' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.1 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name proc_macro_error2 --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro-error2-2.0.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked '--warn=clippy::pedantic' --warn=unexpected_cfgs '--allow=clippy::module_name_repetitions' --check-cfg 'cfg(run_ui_tests)' -C debug-assertions=off --cfg 'feature="default"' --cfg 'feature="syn-error"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "nightly", "syn-error"))' -C metadata=10438c8fe2a66b67 -C extra-filename=-c5d989f7ed176f74 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro_error_attr2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro_error_attr2-0d40ad0fe00179d6.dylib --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rmeta --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rmeta --extern syn=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsyn-ee2207adf5f92674.rmeta --cap-lints warn`
[stm32f4 0.16.0] cargo:rustc-link-search=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-9bd5402a5ad5de08/out
[stm32f4 0.16.0] cargo:rerun-if-changed=src/stm32f411/device.x
[stm32f4 0.16.0] cargo:rerun-if-changed=build.rs
   Compiling cortex-m-rt-macros v0.7.5
   Compiling thiserror-impl v2.0.17
   Compiling serde_derive v1.0.228
   Compiling enumflags2_derive v0.7.12
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=cortex_m_rt_macros CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-macros-0.7.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-macros-0.7.5/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='Attributes re-exported in `cortex-m-rt`' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cortex-m-rt-macros CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/cortex-m' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.7.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name cortex_m_rt_macros --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-macros-0.7.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=572aca140a0279f1 -C extra-filename=-81415a98c1247029 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rlib --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rlib --extern syn=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsyn-ee2207adf5f92674.rlib --extern proc_macro --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=thiserror_impl CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-2.0.17 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-2.0.17/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Implementation detail of the `thiserror` crate' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=thiserror-impl CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/dtolnay/thiserror' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.17 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=17 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name thiserror_impl --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-impl-2.0.17/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=d166887870af1f9d -C extra-filename=-b24c2527d8d06589 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rlib --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rlib --extern syn=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsyn-ee2207adf5f92674.rlib --extern proc_macro --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=serde_derive CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.228 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.228/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Macros 1.1 implementation of #[derive(Serialize, Deserialize)]' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde_derive CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=1.0.228 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=228 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name serde_derive --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.228/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="default"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "deserialize_in_place"))' -C metadata=45abcc52e5f028b2 -C extra-filename=-15b2cc59695ccea0 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rlib --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rlib --extern syn=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsyn-ee2207adf5f92674.rlib --extern proc_macro --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=enumflags2_derive CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2_derive-0.7.12 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2_derive-0.7.12/Cargo.toml CARGO_PKG_AUTHORS='maik klein <maikklein@googlemail.com>:Maja Kądziołka <maya@compilercrim.es>' CARGO_PKG_DESCRIPTION='Do not use directly, use the reexport in the `enumflags2` crate. This allows for better compatibility across versions.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=enumflags2_derive CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/meithecatte/enumflags2' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=0.7.12 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=12 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name enumflags2_derive --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2_derive-0.7.12/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=828978f221ebe4de -C extra-filename=-84f423683721b924 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rlib --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rlib --extern syn=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsyn-ee2207adf5f92674.rlib --extern proc_macro --cap-lints warn`
   Compiling enumflags2 v0.7.12
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=enumflags2 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2-0.7.12 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2-0.7.12/Cargo.toml CARGO_PKG_AUTHORS='maik klein <maikklein@googlemail.com>:Maja Kądziołka <maya@compilercrim.es>' CARGO_PKG_DESCRIPTION='Enum-based bit flags' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=enumflags2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/meithecatte/enumflags2' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=0.7.12 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=12 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name enumflags2 --edition=2018 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/enumflags2-0.7.12/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("serde", "std"))' -C metadata=acd556f63dd70b3b -C extra-filename=-974f43cf1738a570 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern enumflags2_derive=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libenumflags2_derive-84f423683721b924.dylib --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=cortex_m_rt CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5/Cargo.toml CARGO_PKG_AUTHORS='The Cortex-M Team <cortex-m@teams.rust-embedded.org>:Jorge Aparicio <jorge@japaric.io>:Hideki Sekine <sekineh@me.com>' CARGO_PKG_DESCRIPTION='Minimal runtime / startup for Cortex-M microcontrollers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cortex-m-rt CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-embedded/cortex-m' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.7.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name cortex_m_rt --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cortex-m-rt-0.7.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="device"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("device", "paint-stack", "set-sp", "set-vtor", "zero-init-ram"))' -C metadata=bfcadccca144e136 -C extra-filename=-c7bac8f5908da2ae --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern cortex_m_rt_macros=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libcortex_m_rt_macros-81415a98c1247029.dylib --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out --cfg cortex_m --cfg armv7m --cfg has_fpu --check-cfg 'cfg(armv6m)' --check-cfg 'cfg(armv7m)' --check-cfg 'cfg(armv8m)' --check-cfg 'cfg(cortex_m)' --check-cfg 'cfg(has_fpu)'`
   Compiling rtic-macros v2.2.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=rtic_macros CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-macros-2.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-macros-2.2.0/Cargo.toml CARGO_PKG_AUTHORS='The Real-Time Interrupt-driven Concurrency developers:Emil Fresk <emil.fresk@gmail.com>:Henrik Tjäder <henrik@tjaders.com>:Jorge Aparicio <jorge@japaric.io>:Per Lindgren <per.lindgren@ltu.se>' CARGO_PKG_DESCRIPTION='Procedural macros, syntax parsing, and codegen of the RTIC crate' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rtic-macros CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rtic-rs/rtic' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=2.2.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name rtic_macros --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-macros-2.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C debug-assertions=off --cfg 'feature="cortex-m-basepri"' --cfg 'feature="default"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("cortex-m-basepri", "cortex-m-source-masking", "default", "riscv-clint", "riscv-esp32c3", "riscv-esp32c6", "riscv-mecall", "riscv-slic", "test-template"))' -C metadata=12fb2c1d67412589 -C extra-filename=-9f3d15a4749e041f --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern indexmap=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libindexmap-a7e6bc7c3c6242fc.rlib --extern proc_macro_error2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro_error2-c5d989f7ed176f74.rlib --extern proc_macro2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libproc_macro2-cd0a33a50dfe2288.rlib --extern quote=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libquote-f36e0e7cad69e1d5.rlib --extern syn=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libsyn-ee2207adf5f92674.rlib --extern proc_macro --cap-lints warn`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=stm32f4_staging CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1/Cargo.toml CARGO_PKG_AUTHORS='Adam Greig <adam@adamgreig.com>:stm32-rs Contributors' CARGO_PKG_DESCRIPTION='Device support crates for STM32F4 devices' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4-staging CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32-rs' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.16.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=16 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-staging-83aed20f91313826/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name stm32f4_staging --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-staging-0.16.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="atomics"' --cfg 'feature="cortex-m-rt"' --cfg 'feature="critical-section"' --cfg 'feature="default"' --cfg 'feature="rt"' --cfg 'feature="stm32f411"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("atomics", "cortex-m-rt", "critical-section", "default", "defmt", "rt", "stm32f401", "stm32f405", "stm32f407", "stm32f410", "stm32f411", "stm32f412", "stm32f413", "stm32f427", "stm32f429", "stm32f446", "stm32f469"))' -C metadata=734964001ad06b93 -C extra-filename=-7da9de888c305ce1 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m-e574693899d41b52.rmeta --extern cortex_m_rt=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m_rt-c7bac8f5908da2ae.rmeta --extern critical_section=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcritical_section-cc77e411f04b5deb.rmeta --extern portable_atomic=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libportable_atomic-8957a256d69dad9b.rmeta --extern vcell=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libvcell-929dacc6f0d21b3a.rmeta --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-staging-83aed20f91313826/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=stm32f4 CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0/Cargo.toml CARGO_PKG_AUTHORS='Adam Greig <adam@adamgreig.com>:stm32-rs Contributors' CARGO_PKG_DESCRIPTION='Device support crates for STM32F4 devices' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32-rs' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.16.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=16 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-9bd5402a5ad5de08/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name stm32f4 --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4-0.16.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="cortex-m-rt"' --cfg 'feature="critical-section"' --cfg 'feature="default"' --cfg 'feature="rt"' --cfg 'feature="stm32f411"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("atomics", "cortex-m-rt", "critical-section", "default", "defmt", "rt", "stm32f401", "stm32f405", "stm32f407", "stm32f410", "stm32f411", "stm32f412", "stm32f413", "stm32f427", "stm32f429", "stm32f446", "stm32f469"))' -C metadata=f1c4a6fc736e1de5 -C extra-filename=-4627dcfee7703360 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m-e574693899d41b52.rmeta --extern cortex_m_rt=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m_rt-c7bac8f5908da2ae.rmeta --extern critical_section=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcritical_section-cc77e411f04b5deb.rmeta --extern vcell=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libvcell-929dacc6f0d21b3a.rmeta --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-9bd5402a5ad5de08/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=thiserror CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='derive(Error)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=thiserror CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/thiserror' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.17 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=17 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/thiserror-650f379cddfce376/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name thiserror --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/thiserror-2.0.17/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=e467523cd4fc8bff -C extra-filename=-2ff5b4202950c65e --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern thiserror_impl=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libthiserror_impl-b24c2527d8d06589.dylib --cap-lints warn -C panic=abort --check-cfg 'cfg(error_generic_member_access)' --check-cfg 'cfg(thiserror_nightly_testing)' --check-cfg 'cfg(thiserror_no_backtrace_type)'`
   Compiling cobs v0.3.0
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=cobs CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cobs-0.3.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cobs-0.3.0/Cargo.toml CARGO_PKG_AUTHORS='Allen Welkie <>:James Munns <james@onevariable.com>' CARGO_PKG_DESCRIPTION='    This is an implementation of the Consistent Overhead Byte Stuffing (COBS) algorithm.
    COBS is an algorithm for transforming a message into an encoding where a specific value
    (the "sentinel" value) is not used. This value can then be used to mark frame boundaries
    in a serial communication channel. ' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cobs CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/jamesmunns/cobs.rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name cobs --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cobs-0.3.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "defmt", "serde", "std", "use_std"))' -C metadata=daec2248c60e3337 -C extra-filename=-b0481e6f8d378d67 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern thiserror=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libthiserror-2ff5b4202950c65e.rmeta --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=rtic CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0/Cargo.toml CARGO_PKG_AUTHORS='The Real-Time Interrupt-driven Concurrency developers:Emil Fresk <emil.fresk@gmail.com>:Henrik Tjäder <henrik@tjaders.com>:Jorge Aparicio <jorge@japaric.io>:Per Lindgren <per.lindgren@ltu.se>' CARGO_PKG_DESCRIPTION='Real-Time Interrupt-driven Concurrency (RTIC): a concurrency framework for building real-time systems' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rtic CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rtic-rs/rtic' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=2.2.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/rtic-fd993a2141a018fe/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name rtic --edition=2024 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rtic-2.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="cortex-m"' --cfg 'feature="default"' --cfg 'feature="thumbv7-backend"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("cortex-m", "default", "esp32c3", "esp32c6", "riscv", "riscv-clint-backend", "riscv-esp32c3-backend", "riscv-esp32c6-backend", "riscv-mecall-backend", "riscv-slic", "test-critical-section", "thumbv6-backend", "thumbv7-backend", "thumbv8base-backend", "thumbv8main-backend"))' -C metadata=2f24e7e5e757c708 -C extra-filename=-76afad0a94578c92 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern bare_metal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libbare_metal-744b5771366fe873.rmeta --extern cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m-e574693899d41b52.rmeta --extern critical_section=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcritical_section-cc77e411f04b5deb.rmeta --extern portable_atomic=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libportable_atomic-8957a256d69dad9b.rmeta --extern rtic_core=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/librtic_core-09254c6a78559bfb.rmeta --extern rtic_macros=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/librtic_macros-9f3d15a4749e041f.dylib --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out --cfg 'feature="cortex-m-basepri"'`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=serde CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A generic serialization/deserialization framework' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.228 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=228 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/serde-2f32460362756bd4/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name serde --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.228/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="derive"' --cfg 'feature="serde_derive"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' -C metadata=119e503d84b9b047 -C extra-filename=-3b0d7a7135fe669b --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern serde_core=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libserde_core-734fa738f257c8c7.rmeta --extern serde_derive=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libserde_derive-15b2cc59695ccea0.dylib --cap-lints warn -C panic=abort --cfg if_docsrs_then_no_serde_core --check-cfg 'cfg(feature, values("result"))' --check-cfg 'cfg(if_docsrs_then_no_serde_core)' --check-cfg 'cfg(no_core_cstr)' --check-cfg 'cfg(no_core_error)' --check-cfg 'cfg(no_core_net)' --check-cfg 'cfg(no_core_num_saturating)' --check-cfg 'cfg(no_diagnostic_namespace)' --check-cfg 'cfg(no_serde_derive)' --check-cfg 'cfg(no_std_atomic)' --check-cfg 'cfg(no_std_atomic64)' --check-cfg 'cfg(no_target_has_atomic)'`
   Compiling postcard v1.1.3
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=postcard CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/postcard-1.1.3 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/postcard-1.1.3/Cargo.toml CARGO_PKG_AUTHORS='James Munns <james@onevariable.com>' CARGO_PKG_DESCRIPTION='A no_std + serde compatible message library for Rust' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=postcard CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/jamesmunns/postcard' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.1.3 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name postcard --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/postcard-1.1.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="crc"' --cfg 'feature="use-crc"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "core-num-saturating", "crc", "default", "defmt", "embedded-io", "embedded-io-04", "embedded-io-06", "experimental-derive", "heapless", "heapless-cas", "nalgebra-v0_33", "nalgebra_v0_33", "paste", "postcard-derive", "use-crc", "use-defmt", "use-std"))' -C metadata=eccc98a81bfac3b8 -C extra-filename=-a9ff8eb063c51875 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern cobs=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcobs-b0481e6f8d378d67.rmeta --extern crc=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcrc-0b121a1a17304b1d.rmeta --extern serde=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libserde-3b0d7a7135fe669b.rmeta --cap-lints warn -C panic=abort`
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_CRATE_NAME=stm32f4xx_hal CARGO_MANIFEST_DIR=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1 CARGO_MANIFEST_PATH=/Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1/Cargo.toml CARGO_PKG_AUTHORS='Daniel Egger <daniel@eggers-club.de>' CARGO_PKG_DESCRIPTION='Peripheral access API for STM32F4 series microcontrollers' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=0BSD CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f4xx-hal CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/stm32-rs/stm32f4xx-hal' CARGO_PKG_RUST_VERSION=1.62 CARGO_PKG_VERSION=0.22.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=22 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' OUT_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4xx-hal-bac68bd202fac0f1/out /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name stm32f4xx_hal --edition=2021 /Users/philippepascal/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stm32f4xx-hal-0.22.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=s -C panic=abort -C linker-plugin-lto -C codegen-units=1 -C debuginfo=2 --cfg 'feature="gpio-f411"' --cfg 'feature="gpiod"' --cfg 'feature="gpioe"' --cfg 'feature="i2c3"' --cfg 'feature="otg-fs"' --cfg 'feature="sdio"' --cfg 'feature="spi3"' --cfg 'feature="spi4"' --cfg 'feature="spi5"' --cfg 'feature="stm32f411"' --cfg 'feature="tim1"' --cfg 'feature="tim10"' --cfg 'feature="tim11"' --cfg 'feature="tim2"' --cfg 'feature="tim3"' --cfg 'feature="tim4"' --cfg 'feature="tim5"' --cfg 'feature="tim9"' --cfg 'feature="usb_fs"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("adc2", "adc3", "aes", "can", "can1", "can2", "can3", "cortex-m-rtic", "cryp", "dac", "dcmi", "defmt", "dfsdm", "dfsdm1", "dfsdm2", "dma2d", "dsihost", "embedded-display-controller", "eth", "fmc", "fmpi2c1", "fsmc", "fsmc_lcd", "gpio-f401", "gpio-f410", "gpio-f411", "gpio-f412", "gpio-f413", "gpio-f417", "gpio-f427", "gpio-f446", "gpio-f469", "gpiod", "gpioe", "gpiof", "gpiog", "gpioi", "gpioj", "gpiok", "i2c3", "i2s", "lptim1", "ltdc", "otg-fs", "otg-hs", "quadspi", "rcc_i2s_apb", "rcc_shared_m", "rng", "rtic-tim2", "rtic-tim3", "rtic-tim4", "rtic-tim5", "rtic1", "rtic2", "sai", "sai1", "sai2", "sdio", "sdio-host", "spdifrx", "spi3", "spi4", "spi5", "spi6", "stm32-fmc", "stm32f401", "stm32f405", "stm32f407", "stm32f410", "stm32f411", "stm32f412", "stm32f413", "stm32f415", "stm32f417", "stm32f423", "stm32f427", "stm32f429", "stm32f437", "stm32f439", "stm32f446", "stm32f469", "stm32f479", "tim1", "tim10", "tim11", "tim12", "tim13", "tim14", "tim2", "tim3", "tim4", "tim5", "tim6", "tim7", "tim8", "tim9", "uart10", "uart4", "uart5", "uart7", "uart8", "uart9", "usart3", "usb_fs", "usb_hs"))' -C metadata=3ff37407f46879c9 -C extra-filename=-576737a37ca81602 --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern bare_metal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libbare_metal-744b5771366fe873.rmeta --extern cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m-e574693899d41b52.rmeta --extern cortex_m_rt=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m_rt-c7bac8f5908da2ae.rmeta --extern document_features=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps/libdocument_features-6c3a7a4d34044ed8.dylib --extern embedded_dma=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_dma-cbfd5dfbd6702ff0.rmeta --extern embedded_hal_02=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_hal-3a0c5afa89b9df0e.rmeta --extern embedded_hal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_hal-fcea9396f00c896f.rmeta --extern embedded_hal_nb=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_hal_nb-d54fd3cb4171b0ce.rmeta --extern embedded_io=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_io-eca0725bde9afed3.rmeta --extern embedded_storage=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libembedded_storage-62a52bd440f0b3bb.rmeta --extern enumflags2=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libenumflags2-974f43cf1738a570.rmeta --extern fugit=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libfugit-a866a225a0e342c0.rmeta --extern fugit_timer=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libfugit_timer-b3563fbb706f0612.rmeta --extern nb=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libnb-7627bedbeb0eefc1.rmeta --extern rand_core=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/librand_core-80bac2ea3cca7ebf.rmeta --extern stm32f4=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libstm32f4_staging-7da9de888c305ce1.rmeta --extern synopsys_usb_otg=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libsynopsys_usb_otg-543656d204296904.rmeta --extern time=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libtime-5382169716598613.rmeta --extern void=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libvoid-ac6d20138817a90f.rmeta --cap-lints warn -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-staging-83aed20f91313826/out`
   Compiling stm32f411-poubelle v0.1.0 (/Users/philippepascal/repos/stm32f411-poubelle-rtic)
     Running `CARGO=/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/cargo CARGO_BIN_NAME=stm32f411-poubelle CARGO_CRATE_NAME=stm32f411_poubelle CARGO_MANIFEST_DIR=/Users/philippepascal/repos/stm32f411-poubelle-rtic CARGO_MANIFEST_PATH=/Users/philippepascal/repos/stm32f411-poubelle-rtic/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stm32f411-poubelle CARGO_PKG_README=README CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' CARGO_PRIMARY_PACKAGE=1 CARGO_SBOM_PATH='' DYLD_FALLBACK_LIBRARY_PATH='/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps:/Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/lib:/Users/philippepascal/lib:/usr/local/lib:/usr/lib' /Users/philippepascal/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rustc --crate-name stm32f411_poubelle --edition=2024 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=s -C panic=abort -C lto -C codegen-units=1 -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=1bcfe9bc0c9eee61 -C extra-filename=-0280ca309435798a --out-dir /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps --target thumbv7em-none-eabihf -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps -L dependency=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/release/deps --extern alloc_cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/liballoc_cortex_m-bdac2806b28b1139.rlib --extern cortex_m=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m-e574693899d41b52.rlib --extern cortex_m_rt=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcortex_m_rt-c7bac8f5908da2ae.rlib --extern crc32fast=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libcrc32fast-47555ac40857938e.rlib --extern panic_halt=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libpanic_halt-0e5a498c10cc1c59.rlib --extern postcard=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libpostcard-a9ff8eb063c51875.rlib --extern rtic=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/librtic-76afad0a94578c92.rlib --extern serde=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libserde-3b0d7a7135fe669b.rlib --extern stm32f4=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libstm32f4-4627dcfee7703360.rlib --extern stm32f4xx_hal=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libstm32f4xx_hal-576737a37ca81602.rlib --extern usb_device=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libusb_device-a5016ad06c2f4828.rlib --extern usbd_serial=/Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/deps/libusbd_serial-eddc5d5b41640371.rlib -C panic=abort -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-b62bcf6375f49927/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/cortex-m-rt-d1161de380ad5d7b/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-9bd5402a5ad5de08/out -L /Users/philippepascal/repos/stm32f411-poubelle-rtic/target/thumbv7em-none-eabihf/release/build/stm32f4-staging-83aed20f91313826/out`
    Finished `release` profile [optimized + debuginfo] target(s) in 13.43s
